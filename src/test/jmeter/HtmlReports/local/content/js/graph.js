/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 10800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 10800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 7526.0, "series": [{"data": [[0.0, 13.0], [0.1, 86.0], [0.2, 118.0], [0.3, 159.0], [0.4, 189.0], [0.5, 212.0], [0.6, 234.0], [0.7, 250.0], [0.8, 262.0], [0.9, 277.0], [1.0, 294.0], [1.1, 306.0], [1.2, 315.0], [1.3, 326.0], [1.4, 336.0], [1.5, 348.0], [1.6, 359.0], [1.7, 369.0], [1.8, 380.0], [1.9, 392.0], [2.0, 404.0], [2.1, 413.0], [2.2, 421.0], [2.3, 429.0], [2.4, 439.0], [2.5, 447.0], [2.6, 453.0], [2.7, 460.0], [2.8, 468.0], [2.9, 474.0], [3.0, 480.0], [3.1, 488.0], [3.2, 497.0], [3.3, 503.0], [3.4, 511.0], [3.5, 518.0], [3.6, 524.0], [3.7, 529.0], [3.8, 534.0], [3.9, 541.0], [4.0, 548.0], [4.1, 553.0], [4.2, 561.0], [4.3, 567.0], [4.4, 574.0], [4.5, 579.0], [4.6, 584.0], [4.7, 589.0], [4.8, 595.0], [4.9, 602.0], [5.0, 607.0], [5.1, 613.0], [5.2, 618.0], [5.3, 624.0], [5.4, 629.0], [5.5, 636.0], [5.6, 642.0], [5.7, 649.0], [5.8, 655.0], [5.9, 663.0], [6.0, 668.0], [6.1, 673.0], [6.2, 678.0], [6.3, 685.0], [6.4, 691.0], [6.5, 697.0], [6.6, 704.0], [6.7, 710.0], [6.8, 719.0], [6.9, 726.0], [7.0, 732.0], [7.1, 740.0], [7.2, 746.0], [7.3, 752.0], [7.4, 759.0], [7.5, 767.0], [7.6, 775.0], [7.7, 785.0], [7.8, 793.0], [7.9, 801.0], [8.0, 811.0], [8.1, 821.0], [8.2, 830.0], [8.3, 839.0], [8.4, 851.0], [8.5, 862.0], [8.6, 875.0], [8.7, 884.0], [8.8, 894.0], [8.9, 903.0], [9.0, 917.0], [9.1, 925.0], [9.2, 935.0], [9.3, 948.0], [9.4, 957.0], [9.5, 970.0], [9.6, 980.0], [9.7, 992.0], [9.8, 1003.0], [9.9, 1017.0], [10.0, 1028.0], [10.1, 1043.0], [10.2, 1053.0], [10.3, 1067.0], [10.4, 1080.0], [10.5, 1094.0], [10.6, 1107.0], [10.7, 1118.0], [10.8, 1129.0], [10.9, 1141.0], [11.0, 1154.0], [11.1, 1171.0], [11.2, 1183.0], [11.3, 1196.0], [11.4, 1209.0], [11.5, 1224.0], [11.6, 1239.0], [11.7, 1253.0], [11.8, 1269.0], [11.9, 1282.0], [12.0, 1292.0], [12.1, 1308.0], [12.2, 1327.0], [12.3, 1351.0], [12.4, 1370.0], [12.5, 1384.0], [12.6, 1400.0], [12.7, 1421.0], [12.8, 1440.0], [12.9, 1455.0], [13.0, 1473.0], [13.1, 1486.0], [13.2, 1507.0], [13.3, 1522.0], [13.4, 1536.0], [13.5, 1549.0], [13.6, 1567.0], [13.7, 1583.0], [13.8, 1591.0], [13.9, 1611.0], [14.0, 1625.0], [14.1, 1647.0], [14.2, 1666.0], [14.3, 1681.0], [14.4, 1697.0], [14.5, 1714.0], [14.6, 1730.0], [14.7, 1744.0], [14.8, 1756.0], [14.9, 1774.0], [15.0, 1796.0], [15.1, 1809.0], [15.2, 1825.0], [15.3, 1844.0], [15.4, 1860.0], [15.5, 1877.0], [15.6, 1898.0], [15.7, 1914.0], [15.8, 1925.0], [15.9, 1948.0], [16.0, 1966.0], [16.1, 1984.0], [16.2, 1998.0], [16.3, 2018.0], [16.4, 2039.0], [16.5, 2054.0], [16.6, 2071.0], [16.7, 2084.0], [16.8, 2096.0], [16.9, 2119.0], [17.0, 2133.0], [17.1, 2145.0], [17.2, 2158.0], [17.3, 2173.0], [17.4, 2183.0], [17.5, 2200.0], [17.6, 2209.0], [17.7, 2223.0], [17.8, 2235.0], [17.9, 2247.0], [18.0, 2258.0], [18.1, 2272.0], [18.2, 2285.0], [18.3, 2297.0], [18.4, 2308.0], [18.5, 2322.0], [18.6, 2333.0], [18.7, 2343.0], [18.8, 2354.0], [18.9, 2363.0], [19.0, 2376.0], [19.1, 2386.0], [19.2, 2395.0], [19.3, 2405.0], [19.4, 2414.0], [19.5, 2423.0], [19.6, 2432.0], [19.7, 2442.0], [19.8, 2452.0], [19.9, 2460.0], [20.0, 2469.0], [20.1, 2480.0], [20.2, 2491.0], [20.3, 2500.0], [20.4, 2510.0], [20.5, 2519.0], [20.6, 2529.0], [20.7, 2538.0], [20.8, 2548.0], [20.9, 2559.0], [21.0, 2567.0], [21.1, 2580.0], [21.2, 2588.0], [21.3, 2596.0], [21.4, 2605.0], [21.5, 2617.0], [21.6, 2626.0], [21.7, 2637.0], [21.8, 2648.0], [21.9, 2659.0], [22.0, 2667.0], [22.1, 2678.0], [22.2, 2688.0], [22.3, 2697.0], [22.4, 2714.0], [22.5, 2724.0], [22.6, 2733.0], [22.7, 2740.0], [22.8, 2751.0], [22.9, 2760.0], [23.0, 2773.0], [23.1, 2786.0], [23.2, 2797.0], [23.3, 2811.0], [23.4, 2824.0], [23.5, 2830.0], [23.6, 2843.0], [23.7, 2851.0], [23.8, 2860.0], [23.9, 2871.0], [24.0, 2880.0], [24.1, 2889.0], [24.2, 2898.0], [24.3, 2907.0], [24.4, 2916.0], [24.5, 2924.0], [24.6, 2932.0], [24.7, 2942.0], [24.8, 2950.0], [24.9, 2958.0], [25.0, 2967.0], [25.1, 2974.0], [25.2, 2981.0], [25.3, 2991.0], [25.4, 3001.0], [25.5, 3012.0], [25.6, 3021.0], [25.7, 3030.0], [25.8, 3039.0], [25.9, 3047.0], [26.0, 3056.0], [26.1, 3065.0], [26.2, 3076.0], [26.3, 3090.0], [26.4, 3100.0], [26.5, 3110.0], [26.6, 3119.0], [26.7, 3129.0], [26.8, 3134.0], [26.9, 3142.0], [27.0, 3152.0], [27.1, 3161.0], [27.2, 3170.0], [27.3, 3180.0], [27.4, 3190.0], [27.5, 3198.0], [27.6, 3210.0], [27.7, 3218.0], [27.8, 3229.0], [27.9, 3239.0], [28.0, 3250.0], [28.1, 3259.0], [28.2, 3267.0], [28.3, 3277.0], [28.4, 3285.0], [28.5, 3293.0], [28.6, 3302.0], [28.7, 3314.0], [28.8, 3322.0], [28.9, 3331.0], [29.0, 3343.0], [29.1, 3353.0], [29.2, 3363.0], [29.3, 3375.0], [29.4, 3383.0], [29.5, 3396.0], [29.6, 3405.0], [29.7, 3414.0], [29.8, 3423.0], [29.9, 3432.0], [30.0, 3443.0], [30.1, 3453.0], [30.2, 3462.0], [30.3, 3470.0], [30.4, 3483.0], [30.5, 3492.0], [30.6, 3499.0], [30.7, 3508.0], [30.8, 3516.0], [30.9, 3526.0], [31.0, 3532.0], [31.1, 3541.0], [31.2, 3549.0], [31.3, 3557.0], [31.4, 3568.0], [31.5, 3576.0], [31.6, 3588.0], [31.7, 3597.0], [31.8, 3606.0], [31.9, 3616.0], [32.0, 3625.0], [32.1, 3635.0], [32.2, 3646.0], [32.3, 3655.0], [32.4, 3667.0], [32.5, 3679.0], [32.6, 3689.0], [32.7, 3700.0], [32.8, 3709.0], [32.9, 3722.0], [33.0, 3733.0], [33.1, 3746.0], [33.2, 3756.0], [33.3, 3770.0], [33.4, 3778.0], [33.5, 3792.0], [33.6, 3802.0], [33.7, 3812.0], [33.8, 3824.0], [33.9, 3836.0], [34.0, 3848.0], [34.1, 3859.0], [34.2, 3867.0], [34.3, 3878.0], [34.4, 3888.0], [34.5, 3899.0], [34.6, 3910.0], [34.7, 3920.0], [34.8, 3930.0], [34.9, 3939.0], [35.0, 3950.0], [35.1, 3961.0], [35.2, 3971.0], [35.3, 3982.0], [35.4, 3991.0], [35.5, 4002.0], [35.6, 4010.0], [35.7, 4018.0], [35.8, 4030.0], [35.9, 4042.0], [36.0, 4053.0], [36.1, 4065.0], [36.2, 4076.0], [36.3, 4087.0], [36.4, 4096.0], [36.5, 4108.0], [36.6, 4117.0], [36.7, 4131.0], [36.8, 4139.0], [36.9, 4148.0], [37.0, 4159.0], [37.1, 4169.0], [37.2, 4180.0], [37.3, 4194.0], [37.4, 4206.0], [37.5, 4217.0], [37.6, 4229.0], [37.7, 4239.0], [37.8, 4258.0], [37.9, 4268.0], [38.0, 4277.0], [38.1, 4292.0], [38.2, 4303.0], [38.3, 4314.0], [38.4, 4324.0], [38.5, 4333.0], [38.6, 4343.0], [38.7, 4354.0], [38.8, 4363.0], [38.9, 4374.0], [39.0, 4387.0], [39.1, 4398.0], [39.2, 4408.0], [39.3, 4419.0], [39.4, 4424.0], [39.5, 4434.0], [39.6, 4444.0], [39.7, 4450.0], [39.8, 4461.0], [39.9, 4472.0], [40.0, 4481.0], [40.1, 4489.0], [40.2, 4499.0], [40.3, 4511.0], [40.4, 4520.0], [40.5, 4534.0], [40.6, 4543.0], [40.7, 4558.0], [40.8, 4568.0], [40.9, 4580.0], [41.0, 4591.0], [41.1, 4603.0], [41.2, 4614.0], [41.3, 4624.0], [41.4, 4634.0], [41.5, 4645.0], [41.6, 4654.0], [41.7, 4667.0], [41.8, 4673.0], [41.9, 4682.0], [42.0, 4691.0], [42.1, 4701.0], [42.2, 4711.0], [42.3, 4718.0], [42.4, 4727.0], [42.5, 4734.0], [42.6, 4742.0], [42.7, 4756.0], [42.8, 4767.0], [42.9, 4777.0], [43.0, 4784.0], [43.1, 4792.0], [43.2, 4802.0], [43.3, 4809.0], [43.4, 4819.0], [43.5, 4826.0], [43.6, 4835.0], [43.7, 4841.0], [43.8, 4848.0], [43.9, 4856.0], [44.0, 4864.0], [44.1, 4873.0], [44.2, 4880.0], [44.3, 4886.0], [44.4, 4890.0], [44.5, 4895.0], [44.6, 4901.0], [44.7, 4907.0], [44.8, 4911.0], [44.9, 4918.0], [45.0, 4923.0], [45.1, 4928.0], [45.2, 4934.0], [45.3, 4938.0], [45.4, 4944.0], [45.5, 4948.0], [45.6, 4952.0], [45.7, 4957.0], [45.8, 4962.0], [45.9, 4969.0], [46.0, 4974.0], [46.1, 4979.0], [46.2, 4984.0], [46.3, 4989.0], [46.4, 4993.0], [46.5, 4996.0], [46.6, 5000.0], [46.7, 5004.0], [46.8, 5009.0], [46.9, 5013.0], [47.0, 5017.0], [47.1, 5020.0], [47.2, 5024.0], [47.3, 5030.0], [47.4, 5034.0], [47.5, 5038.0], [47.6, 5042.0], [47.7, 5045.0], [47.8, 5049.0], [47.9, 5051.0], [48.0, 5055.0], [48.1, 5058.0], [48.2, 5063.0], [48.3, 5065.0], [48.4, 5068.0], [48.5, 5071.0], [48.6, 5074.0], [48.7, 5077.0], [48.8, 5081.0], [48.9, 5084.0], [49.0, 5087.0], [49.1, 5090.0], [49.2, 5093.0], [49.3, 5097.0], [49.4, 5100.0], [49.5, 5103.0], [49.6, 5106.0], [49.7, 5110.0], [49.8, 5113.0], [49.9, 5116.0], [50.0, 5120.0], [50.1, 5122.0], [50.2, 5126.0], [50.3, 5129.0], [50.4, 5132.0], [50.5, 5135.0], [50.6, 5139.0], [50.7, 5142.0], [50.8, 5146.0], [50.9, 5149.0], [51.0, 5152.0], [51.1, 5155.0], [51.2, 5158.0], [51.3, 5161.0], [51.4, 5163.0], [51.5, 5166.0], [51.6, 5169.0], [51.7, 5171.0], [51.8, 5174.0], [51.9, 5177.0], [52.0, 5179.0], [52.1, 5182.0], [52.2, 5185.0], [52.3, 5187.0], [52.4, 5190.0], [52.5, 5193.0], [52.6, 5195.0], [52.7, 5198.0], [52.8, 5201.0], [52.9, 5204.0], [53.0, 5206.0], [53.1, 5209.0], [53.2, 5211.0], [53.3, 5215.0], [53.4, 5217.0], [53.5, 5219.0], [53.6, 5222.0], [53.7, 5224.0], [53.8, 5226.0], [53.9, 5228.0], [54.0, 5231.0], [54.1, 5234.0], [54.2, 5238.0], [54.3, 5240.0], [54.4, 5243.0], [54.5, 5245.0], [54.6, 5248.0], [54.7, 5250.0], [54.8, 5253.0], [54.9, 5255.0], [55.0, 5257.0], [55.1, 5260.0], [55.2, 5262.0], [55.3, 5265.0], [55.4, 5267.0], [55.5, 5270.0], [55.6, 5272.0], [55.7, 5275.0], [55.8, 5278.0], [55.9, 5280.0], [56.0, 5283.0], [56.1, 5286.0], [56.2, 5289.0], [56.3, 5291.0], [56.4, 5293.0], [56.5, 5295.0], [56.6, 5298.0], [56.7, 5300.0], [56.8, 5302.0], [56.9, 5304.0], [57.0, 5306.0], [57.1, 5308.0], [57.2, 5310.0], [57.3, 5312.0], [57.4, 5315.0], [57.5, 5317.0], [57.6, 5319.0], [57.7, 5321.0], [57.8, 5324.0], [57.9, 5326.0], [58.0, 5328.0], [58.1, 5331.0], [58.2, 5333.0], [58.3, 5337.0], [58.4, 5339.0], [58.5, 5342.0], [58.6, 5344.0], [58.7, 5347.0], [58.8, 5349.0], [58.9, 5351.0], [59.0, 5354.0], [59.1, 5357.0], [59.2, 5359.0], [59.3, 5360.0], [59.4, 5363.0], [59.5, 5365.0], [59.6, 5367.0], [59.7, 5369.0], [59.8, 5371.0], [59.9, 5373.0], [60.0, 5376.0], [60.1, 5379.0], [60.2, 5381.0], [60.3, 5384.0], [60.4, 5387.0], [60.5, 5389.0], [60.6, 5391.0], [60.7, 5394.0], [60.8, 5396.0], [60.9, 5399.0], [61.0, 5402.0], [61.1, 5405.0], [61.2, 5407.0], [61.3, 5410.0], [61.4, 5412.0], [61.5, 5415.0], [61.6, 5418.0], [61.7, 5421.0], [61.8, 5423.0], [61.9, 5425.0], [62.0, 5428.0], [62.1, 5430.0], [62.2, 5433.0], [62.3, 5435.0], [62.4, 5437.0], [62.5, 5439.0], [62.6, 5441.0], [62.7, 5444.0], [62.8, 5445.0], [62.9, 5448.0], [63.0, 5450.0], [63.1, 5452.0], [63.2, 5455.0], [63.3, 5458.0], [63.4, 5461.0], [63.5, 5464.0], [63.6, 5467.0], [63.7, 5469.0], [63.8, 5472.0], [63.9, 5476.0], [64.0, 5478.0], [64.1, 5482.0], [64.2, 5484.0], [64.3, 5487.0], [64.4, 5490.0], [64.5, 5492.0], [64.6, 5495.0], [64.7, 5498.0], [64.8, 5500.0], [64.9, 5504.0], [65.0, 5507.0], [65.1, 5509.0], [65.2, 5512.0], [65.3, 5515.0], [65.4, 5517.0], [65.5, 5520.0], [65.6, 5522.0], [65.7, 5526.0], [65.8, 5530.0], [65.9, 5533.0], [66.0, 5535.0], [66.1, 5538.0], [66.2, 5541.0], [66.3, 5544.0], [66.4, 5547.0], [66.5, 5549.0], [66.6, 5552.0], [66.7, 5555.0], [66.8, 5557.0], [66.9, 5560.0], [67.0, 5564.0], [67.1, 5567.0], [67.2, 5570.0], [67.3, 5572.0], [67.4, 5575.0], [67.5, 5578.0], [67.6, 5581.0], [67.7, 5583.0], [67.8, 5586.0], [67.9, 5589.0], [68.0, 5592.0], [68.1, 5595.0], [68.2, 5598.0], [68.3, 5602.0], [68.4, 5605.0], [68.5, 5607.0], [68.6, 5609.0], [68.7, 5613.0], [68.8, 5616.0], [68.9, 5618.0], [69.0, 5621.0], [69.1, 5624.0], [69.2, 5628.0], [69.3, 5631.0], [69.4, 5634.0], [69.5, 5638.0], [69.6, 5642.0], [69.7, 5646.0], [69.8, 5649.0], [69.9, 5653.0], [70.0, 5656.0], [70.1, 5659.0], [70.2, 5662.0], [70.3, 5666.0], [70.4, 5668.0], [70.5, 5672.0], [70.6, 5675.0], [70.7, 5680.0], [70.8, 5683.0], [70.9, 5685.0], [71.0, 5690.0], [71.1, 5692.0], [71.2, 5695.0], [71.3, 5699.0], [71.4, 5702.0], [71.5, 5704.0], [71.6, 5707.0], [71.7, 5711.0], [71.8, 5714.0], [71.9, 5718.0], [72.0, 5723.0], [72.1, 5726.0], [72.2, 5729.0], [72.3, 5732.0], [72.4, 5736.0], [72.5, 5739.0], [72.6, 5743.0], [72.7, 5746.0], [72.8, 5750.0], [72.9, 5753.0], [73.0, 5756.0], [73.1, 5760.0], [73.2, 5763.0], [73.3, 5766.0], [73.4, 5771.0], [73.5, 5775.0], [73.6, 5779.0], [73.7, 5782.0], [73.8, 5786.0], [73.9, 5789.0], [74.0, 5793.0], [74.1, 5798.0], [74.2, 5802.0], [74.3, 5806.0], [74.4, 5810.0], [74.5, 5814.0], [74.6, 5817.0], [74.7, 5821.0], [74.8, 5823.0], [74.9, 5826.0], [75.0, 5829.0], [75.1, 5832.0], [75.2, 5836.0], [75.3, 5839.0], [75.4, 5843.0], [75.5, 5846.0], [75.6, 5849.0], [75.7, 5851.0], [75.8, 5854.0], [75.9, 5857.0], [76.0, 5860.0], [76.1, 5863.0], [76.2, 5866.0], [76.3, 5869.0], [76.4, 5871.0], [76.5, 5876.0], [76.6, 5879.0], [76.7, 5882.0], [76.8, 5885.0], [76.9, 5888.0], [77.0, 5892.0], [77.1, 5895.0], [77.2, 5898.0], [77.3, 5902.0], [77.4, 5906.0], [77.5, 5909.0], [77.6, 5912.0], [77.7, 5915.0], [77.8, 5919.0], [77.9, 5922.0], [78.0, 5926.0], [78.1, 5929.0], [78.2, 5933.0], [78.3, 5936.0], [78.4, 5940.0], [78.5, 5943.0], [78.6, 5946.0], [78.7, 5950.0], [78.8, 5952.0], [78.9, 5956.0], [79.0, 5959.0], [79.1, 5962.0], [79.2, 5965.0], [79.3, 5969.0], [79.4, 5973.0], [79.5, 5976.0], [79.6, 5979.0], [79.7, 5982.0], [79.8, 5985.0], [79.9, 5988.0], [80.0, 5991.0], [80.1, 5995.0], [80.2, 5998.0], [80.3, 6001.0], [80.4, 6004.0], [80.5, 6008.0], [80.6, 6011.0], [80.7, 6015.0], [80.8, 6018.0], [80.9, 6021.0], [81.0, 6024.0], [81.1, 6027.0], [81.2, 6030.0], [81.3, 6032.0], [81.4, 6036.0], [81.5, 6040.0], [81.6, 6042.0], [81.7, 6045.0], [81.8, 6048.0], [81.9, 6051.0], [82.0, 6054.0], [82.1, 6057.0], [82.2, 6060.0], [82.3, 6062.0], [82.4, 6066.0], [82.5, 6069.0], [82.6, 6072.0], [82.7, 6076.0], [82.8, 6080.0], [82.9, 6083.0], [83.0, 6087.0], [83.1, 6090.0], [83.2, 6093.0], [83.3, 6096.0], [83.4, 6100.0], [83.5, 6103.0], [83.6, 6106.0], [83.7, 6108.0], [83.8, 6111.0], [83.9, 6114.0], [84.0, 6117.0], [84.1, 6120.0], [84.2, 6123.0], [84.3, 6126.0], [84.4, 6128.0], [84.5, 6130.0], [84.6, 6133.0], [84.7, 6136.0], [84.8, 6139.0], [84.9, 6142.0], [85.0, 6145.0], [85.1, 6148.0], [85.2, 6152.0], [85.3, 6155.0], [85.4, 6158.0], [85.5, 6162.0], [85.6, 6165.0], [85.7, 6167.0], [85.8, 6170.0], [85.9, 6173.0], [86.0, 6177.0], [86.1, 6181.0], [86.2, 6184.0], [86.3, 6188.0], [86.4, 6190.0], [86.5, 6192.0], [86.6, 6196.0], [86.7, 6199.0], [86.8, 6202.0], [86.9, 6205.0], [87.0, 6208.0], [87.1, 6211.0], [87.2, 6215.0], [87.3, 6218.0], [87.4, 6220.0], [87.5, 6223.0], [87.6, 6226.0], [87.7, 6229.0], [87.8, 6232.0], [87.9, 6235.0], [88.0, 6238.0], [88.1, 6241.0], [88.2, 6243.0], [88.3, 6247.0], [88.4, 6251.0], [88.5, 6254.0], [88.6, 6256.0], [88.7, 6259.0], [88.8, 6262.0], [88.9, 6265.0], [89.0, 6267.0], [89.1, 6269.0], [89.2, 6271.0], [89.3, 6274.0], [89.4, 6277.0], [89.5, 6280.0], [89.6, 6282.0], [89.7, 6286.0], [89.8, 6288.0], [89.9, 6291.0], [90.0, 6294.0], [90.1, 6296.0], [90.2, 6299.0], [90.3, 6301.0], [90.4, 6303.0], [90.5, 6306.0], [90.6, 6308.0], [90.7, 6311.0], [90.8, 6314.0], [90.9, 6318.0], [91.0, 6320.0], [91.1, 6322.0], [91.2, 6324.0], [91.3, 6327.0], [91.4, 6329.0], [91.5, 6331.0], [91.6, 6334.0], [91.7, 6337.0], [91.8, 6339.0], [91.9, 6342.0], [92.0, 6344.0], [92.1, 6347.0], [92.2, 6349.0], [92.3, 6352.0], [92.4, 6354.0], [92.5, 6357.0], [92.6, 6359.0], [92.7, 6362.0], [92.8, 6365.0], [92.9, 6367.0], [93.0, 6370.0], [93.1, 6373.0], [93.2, 6375.0], [93.3, 6378.0], [93.4, 6382.0], [93.5, 6385.0], [93.6, 6388.0], [93.7, 6392.0], [93.8, 6395.0], [93.9, 6397.0], [94.0, 6399.0], [94.1, 6402.0], [94.2, 6404.0], [94.3, 6407.0], [94.4, 6410.0], [94.5, 6413.0], [94.6, 6416.0], [94.7, 6419.0], [94.8, 6422.0], [94.9, 6425.0], [95.0, 6428.0], [95.1, 6431.0], [95.2, 6434.0], [95.3, 6437.0], [95.4, 6439.0], [95.5, 6442.0], [95.6, 6445.0], [95.7, 6449.0], [95.8, 6452.0], [95.9, 6455.0], [96.0, 6459.0], [96.1, 6463.0], [96.2, 6468.0], [96.3, 6472.0], [96.4, 6476.0], [96.5, 6480.0], [96.6, 6483.0], [96.7, 6488.0], [96.8, 6491.0], [96.9, 6495.0], [97.0, 6499.0], [97.1, 6504.0], [97.2, 6508.0], [97.3, 6513.0], [97.4, 6517.0], [97.5, 6523.0], [97.6, 6529.0], [97.7, 6534.0], [97.8, 6540.0], [97.9, 6543.0], [98.0, 6549.0], [98.1, 6554.0], [98.2, 6563.0], [98.3, 6569.0], [98.4, 6575.0], [98.5, 6585.0], [98.6, 6593.0], [98.7, 6603.0], [98.8, 6610.0], [98.9, 6625.0], [99.0, 6637.0], [99.1, 6654.0], [99.2, 6668.0], [99.3, 6690.0], [99.4, 6710.0], [99.5, 6737.0], [99.6, 6768.0], [99.7, 6800.0], [99.8, 6882.0], [99.9, 6996.0], [100.0, 7526.0]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[0.0, 13.0], [0.1, 22.0], [0.2, 31.0], [0.3, 39.0], [0.4, 48.0], [0.5, 57.0], [0.6, 67.0], [0.7, 76.0], [0.8, 87.0], [0.9, 95.0], [1.0, 105.0], [1.1, 112.0], [1.2, 121.0], [1.3, 130.0], [1.4, 139.0], [1.5, 147.0], [1.6, 155.0], [1.7, 160.0], [1.8, 168.0], [1.9, 174.0], [2.0, 179.0], [2.1, 184.0], [2.2, 190.0], [2.3, 197.0], [2.4, 203.0], [2.5, 209.0], [2.6, 215.0], [2.7, 222.0], [2.8, 228.0], [2.9, 234.0], [3.0, 242.0], [3.1, 248.0], [3.2, 254.0], [3.3, 261.0], [3.4, 268.0], [3.5, 276.0], [3.6, 287.0], [3.7, 292.0], [3.8, 300.0], [3.9, 311.0], [4.0, 323.0], [4.1, 330.0], [4.2, 342.0], [4.3, 352.0], [4.4, 361.0], [4.5, 372.0], [4.6, 383.0], [4.7, 398.0], [4.8, 407.0], [4.9, 423.0], [5.0, 436.0], [5.1, 450.0], [5.2, 472.0], [5.3, 494.0], [5.4, 511.0], [5.5, 529.0], [5.6, 555.0], [5.7, 579.0], [5.8, 601.0], [5.9, 614.0], [6.0, 638.0], [6.1, 660.0], [6.2, 684.0], [6.3, 702.0], [6.4, 717.0], [6.5, 734.0], [6.6, 748.0], [6.7, 759.0], [6.8, 774.0], [6.9, 791.0], [7.0, 806.0], [7.1, 818.0], [7.2, 833.0], [7.3, 844.0], [7.4, 853.0], [7.5, 861.0], [7.6, 873.0], [7.7, 884.0], [7.8, 898.0], [7.9, 910.0], [8.0, 923.0], [8.1, 934.0], [8.2, 946.0], [8.3, 957.0], [8.4, 973.0], [8.5, 987.0], [8.6, 1005.0], [8.7, 1023.0], [8.8, 1039.0], [8.9, 1051.0], [9.0, 1066.0], [9.1, 1082.0], [9.2, 1095.0], [9.3, 1109.0], [9.4, 1120.0], [9.5, 1130.0], [9.6, 1140.0], [9.7, 1152.0], [9.8, 1162.0], [9.9, 1174.0], [10.0, 1190.0], [10.1, 1208.0], [10.2, 1228.0], [10.3, 1240.0], [10.4, 1253.0], [10.5, 1262.0], [10.6, 1269.0], [10.7, 1278.0], [10.8, 1289.0], [10.9, 1297.0], [11.0, 1309.0], [11.1, 1321.0], [11.2, 1330.0], [11.3, 1338.0], [11.4, 1346.0], [11.5, 1355.0], [11.6, 1362.0], [11.7, 1373.0], [11.8, 1378.0], [11.9, 1386.0], [12.0, 1395.0], [12.1, 1405.0], [12.2, 1416.0], [12.3, 1425.0], [12.4, 1435.0], [12.5, 1443.0], [12.6, 1455.0], [12.7, 1463.0], [12.8, 1471.0], [12.9, 1478.0], [13.0, 1485.0], [13.1, 1499.0], [13.2, 1513.0], [13.3, 1524.0], [13.4, 1534.0], [13.5, 1544.0], [13.6, 1550.0], [13.7, 1559.0], [13.8, 1570.0], [13.9, 1577.0], [14.0, 1588.0], [14.1, 1598.0], [14.2, 1610.0], [14.3, 1622.0], [14.4, 1631.0], [14.5, 1643.0], [14.6, 1655.0], [14.7, 1667.0], [14.8, 1680.0], [14.9, 1691.0], [15.0, 1702.0], [15.1, 1712.0], [15.2, 1724.0], [15.3, 1736.0], [15.4, 1744.0], [15.5, 1757.0], [15.6, 1769.0], [15.7, 1779.0], [15.8, 1786.0], [15.9, 1794.0], [16.0, 1802.0], [16.1, 1813.0], [16.2, 1823.0], [16.3, 1830.0], [16.4, 1841.0], [16.5, 1851.0], [16.6, 1861.0], [16.7, 1870.0], [16.8, 1880.0], [16.9, 1888.0], [17.0, 1898.0], [17.1, 1907.0], [17.2, 1924.0], [17.3, 1938.0], [17.4, 1948.0], [17.5, 1957.0], [17.6, 1971.0], [17.7, 1981.0], [17.8, 1995.0], [17.9, 2009.0], [18.0, 2026.0], [18.1, 2037.0], [18.2, 2047.0], [18.3, 2058.0], [18.4, 2065.0], [18.5, 2071.0], [18.6, 2080.0], [18.7, 2090.0], [18.8, 2100.0], [18.9, 2112.0], [19.0, 2118.0], [19.1, 2125.0], [19.2, 2132.0], [19.3, 2140.0], [19.4, 2150.0], [19.5, 2159.0], [19.6, 2165.0], [19.7, 2172.0], [19.8, 2181.0], [19.9, 2188.0], [20.0, 2196.0], [20.1, 2205.0], [20.2, 2216.0], [20.3, 2226.0], [20.4, 2236.0], [20.5, 2249.0], [20.6, 2259.0], [20.7, 2273.0], [20.8, 2288.0], [20.9, 2296.0], [21.0, 2307.0], [21.1, 2315.0], [21.2, 2326.0], [21.3, 2337.0], [21.4, 2345.0], [21.5, 2355.0], [21.6, 2365.0], [21.7, 2374.0], [21.8, 2384.0], [21.9, 2394.0], [22.0, 2404.0], [22.1, 2416.0], [22.2, 2427.0], [22.3, 2438.0], [22.4, 2448.0], [22.5, 2460.0], [22.6, 2469.0], [22.7, 2481.0], [22.8, 2495.0], [22.9, 2507.0], [23.0, 2517.0], [23.1, 2528.0], [23.2, 2536.0], [23.3, 2548.0], [23.4, 2558.0], [23.5, 2569.0], [23.6, 2576.0], [23.7, 2583.0], [23.8, 2592.0], [23.9, 2599.0], [24.0, 2608.0], [24.1, 2614.0], [24.2, 2621.0], [24.3, 2626.0], [24.4, 2634.0], [24.5, 2641.0], [24.6, 2647.0], [24.7, 2655.0], [24.8, 2662.0], [24.9, 2669.0], [25.0, 2678.0], [25.1, 2684.0], [25.2, 2695.0], [25.3, 2707.0], [25.4, 2718.0], [25.5, 2725.0], [25.6, 2733.0], [25.7, 2743.0], [25.8, 2753.0], [25.9, 2762.0], [26.0, 2770.0], [26.1, 2781.0], [26.2, 2788.0], [26.3, 2796.0], [26.4, 2806.0], [26.5, 2816.0], [26.6, 2828.0], [26.7, 2838.0], [26.8, 2846.0], [26.9, 2854.0], [27.0, 2862.0], [27.1, 2871.0], [27.2, 2877.0], [27.3, 2886.0], [27.4, 2896.0], [27.5, 2905.0], [27.6, 2915.0], [27.7, 2925.0], [27.8, 2934.0], [27.9, 2943.0], [28.0, 2956.0], [28.1, 2965.0], [28.2, 2977.0], [28.3, 2985.0], [28.4, 2996.0], [28.5, 3007.0], [28.6, 3017.0], [28.7, 3027.0], [28.8, 3037.0], [28.9, 3050.0], [29.0, 3056.0], [29.1, 3065.0], [29.2, 3074.0], [29.3, 3087.0], [29.4, 3094.0], [29.5, 3101.0], [29.6, 3108.0], [29.7, 3114.0], [29.8, 3123.0], [29.9, 3132.0], [30.0, 3139.0], [30.1, 3150.0], [30.2, 3157.0], [30.3, 3164.0], [30.4, 3172.0], [30.5, 3180.0], [30.6, 3191.0], [30.7, 3200.0], [30.8, 3207.0], [30.9, 3217.0], [31.0, 3226.0], [31.1, 3236.0], [31.2, 3248.0], [31.3, 3254.0], [31.4, 3265.0], [31.5, 3273.0], [31.6, 3283.0], [31.7, 3293.0], [31.8, 3306.0], [31.9, 3317.0], [32.0, 3333.0], [32.1, 3343.0], [32.2, 3356.0], [32.3, 3367.0], [32.4, 3382.0], [32.5, 3395.0], [32.6, 3408.0], [32.7, 3419.0], [32.8, 3427.0], [32.9, 3439.0], [33.0, 3448.0], [33.1, 3463.0], [33.2, 3476.0], [33.3, 3487.0], [33.4, 3495.0], [33.5, 3506.0], [33.6, 3521.0], [33.7, 3532.0], [33.8, 3542.0], [33.9, 3552.0], [34.0, 3563.0], [34.1, 3578.0], [34.2, 3589.0], [34.3, 3599.0], [34.4, 3611.0], [34.5, 3620.0], [34.6, 3633.0], [34.7, 3643.0], [34.8, 3652.0], [34.9, 3666.0], [35.0, 3677.0], [35.1, 3686.0], [35.2, 3697.0], [35.3, 3709.0], [35.4, 3719.0], [35.5, 3731.0], [35.6, 3741.0], [35.7, 3750.0], [35.8, 3760.0], [35.9, 3770.0], [36.0, 3780.0], [36.1, 3791.0], [36.2, 3800.0], [36.3, 3813.0], [36.4, 3823.0], [36.5, 3839.0], [36.6, 3854.0], [36.7, 3864.0], [36.8, 3875.0], [36.9, 3884.0], [37.0, 3896.0], [37.1, 3907.0], [37.2, 3917.0], [37.3, 3925.0], [37.4, 3934.0], [37.5, 3947.0], [37.6, 3959.0], [37.7, 3970.0], [37.8, 3981.0], [37.9, 3991.0], [38.0, 3998.0], [38.1, 4006.0], [38.2, 4014.0], [38.3, 4024.0], [38.4, 4029.0], [38.5, 4036.0], [38.6, 4045.0], [38.7, 4053.0], [38.8, 4061.0], [38.9, 4072.0], [39.0, 4081.0], [39.1, 4090.0], [39.2, 4098.0], [39.3, 4107.0], [39.4, 4117.0], [39.5, 4126.0], [39.6, 4142.0], [39.7, 4160.0], [39.8, 4167.0], [39.9, 4179.0], [40.0, 4192.0], [40.1, 4208.0], [40.2, 4219.0], [40.3, 4230.0], [40.4, 4242.0], [40.5, 4252.0], [40.6, 4262.0], [40.7, 4271.0], [40.8, 4278.0], [40.9, 4295.0], [41.0, 4304.0], [41.1, 4314.0], [41.2, 4325.0], [41.3, 4337.0], [41.4, 4346.0], [41.5, 4354.0], [41.6, 4365.0], [41.7, 4378.0], [41.8, 4391.0], [41.9, 4399.0], [42.0, 4407.0], [42.1, 4416.0], [42.2, 4427.0], [42.3, 4437.0], [42.4, 4447.0], [42.5, 4458.0], [42.6, 4465.0], [42.7, 4472.0], [42.8, 4481.0], [42.9, 4489.0], [43.0, 4496.0], [43.1, 4503.0], [43.2, 4510.0], [43.3, 4516.0], [43.4, 4522.0], [43.5, 4528.0], [43.6, 4537.0], [43.7, 4546.0], [43.8, 4556.0], [43.9, 4564.0], [44.0, 4570.0], [44.1, 4579.0], [44.2, 4585.0], [44.3, 4596.0], [44.4, 4604.0], [44.5, 4615.0], [44.6, 4624.0], [44.7, 4631.0], [44.8, 4638.0], [44.9, 4645.0], [45.0, 4649.0], [45.1, 4657.0], [45.2, 4663.0], [45.3, 4671.0], [45.4, 4680.0], [45.5, 4685.0], [45.6, 4690.0], [45.7, 4697.0], [45.8, 4701.0], [45.9, 4705.0], [46.0, 4709.0], [46.1, 4713.0], [46.2, 4717.0], [46.3, 4721.0], [46.4, 4724.0], [46.5, 4728.0], [46.6, 4732.0], [46.7, 4737.0], [46.8, 4740.0], [46.9, 4743.0], [47.0, 4747.0], [47.1, 4752.0], [47.2, 4757.0], [47.3, 4759.0], [47.4, 4764.0], [47.5, 4767.0], [47.6, 4771.0], [47.7, 4775.0], [47.8, 4779.0], [47.9, 4782.0], [48.0, 4788.0], [48.1, 4791.0], [48.2, 4795.0], [48.3, 4800.0], [48.4, 4802.0], [48.5, 4807.0], [48.6, 4810.0], [48.7, 4812.0], [48.8, 4816.0], [48.9, 4819.0], [49.0, 4822.0], [49.1, 4826.0], [49.2, 4830.0], [49.3, 4832.0], [49.4, 4836.0], [49.5, 4838.0], [49.6, 4841.0], [49.7, 4844.0], [49.8, 4847.0], [49.9, 4849.0], [50.0, 4852.0], [50.1, 4855.0], [50.2, 4858.0], [50.3, 4861.0], [50.4, 4863.0], [50.5, 4866.0], [50.6, 4868.0], [50.7, 4870.0], [50.8, 4873.0], [50.9, 4875.0], [51.0, 4877.0], [51.1, 4880.0], [51.2, 4882.0], [51.3, 4885.0], [51.4, 4888.0], [51.5, 4891.0], [51.6, 4893.0], [51.7, 4895.0], [51.8, 4898.0], [51.9, 4900.0], [52.0, 4904.0], [52.1, 4907.0], [52.2, 4909.0], [52.3, 4911.0], [52.4, 4914.0], [52.5, 4916.0], [52.6, 4918.0], [52.7, 4920.0], [52.8, 4923.0], [52.9, 4925.0], [53.0, 4928.0], [53.1, 4930.0], [53.2, 4933.0], [53.3, 4935.0], [53.4, 4938.0], [53.5, 4940.0], [53.6, 4943.0], [53.7, 4945.0], [53.8, 4947.0], [53.9, 4949.0], [54.0, 4951.0], [54.1, 4954.0], [54.2, 4956.0], [54.3, 4958.0], [54.4, 4960.0], [54.5, 4963.0], [54.6, 4965.0], [54.7, 4968.0], [54.8, 4970.0], [54.9, 4973.0], [55.0, 4975.0], [55.1, 4977.0], [55.2, 4979.0], [55.3, 4981.0], [55.4, 4983.0], [55.5, 4985.0], [55.6, 4987.0], [55.7, 4990.0], [55.8, 4991.0], [55.9, 4994.0], [56.0, 4998.0], [56.1, 5000.0], [56.2, 5002.0], [56.3, 5004.0], [56.4, 5007.0], [56.5, 5010.0], [56.6, 5013.0], [56.7, 5015.0], [56.8, 5017.0], [56.9, 5020.0], [57.0, 5021.0], [57.1, 5024.0], [57.2, 5027.0], [57.3, 5030.0], [57.4, 5032.0], [57.5, 5034.0], [57.6, 5036.0], [57.7, 5039.0], [57.8, 5041.0], [57.9, 5045.0], [58.0, 5047.0], [58.1, 5050.0], [58.2, 5053.0], [58.3, 5055.0], [58.4, 5059.0], [58.5, 5061.0], [58.6, 5064.0], [58.7, 5067.0], [58.8, 5070.0], [58.9, 5073.0], [59.0, 5077.0], [59.1, 5080.0], [59.2, 5082.0], [59.3, 5084.0], [59.4, 5086.0], [59.5, 5089.0], [59.6, 5091.0], [59.7, 5095.0], [59.8, 5097.0], [59.9, 5099.0], [60.0, 5101.0], [60.1, 5103.0], [60.2, 5105.0], [60.3, 5107.0], [60.4, 5109.0], [60.5, 5111.0], [60.6, 5113.0], [60.7, 5116.0], [60.8, 5118.0], [60.9, 5120.0], [61.0, 5122.0], [61.1, 5125.0], [61.2, 5128.0], [61.3, 5131.0], [61.4, 5134.0], [61.5, 5136.0], [61.6, 5138.0], [61.7, 5141.0], [61.8, 5144.0], [61.9, 5146.0], [62.0, 5149.0], [62.1, 5151.0], [62.2, 5154.0], [62.3, 5157.0], [62.4, 5159.0], [62.5, 5163.0], [62.6, 5166.0], [62.7, 5168.0], [62.8, 5171.0], [62.9, 5174.0], [63.0, 5176.0], [63.1, 5179.0], [63.2, 5182.0], [63.3, 5184.0], [63.4, 5187.0], [63.5, 5189.0], [63.6, 5192.0], [63.7, 5194.0], [63.8, 5198.0], [63.9, 5201.0], [64.0, 5203.0], [64.1, 5207.0], [64.2, 5209.0], [64.3, 5212.0], [64.4, 5215.0], [64.5, 5218.0], [64.6, 5221.0], [64.7, 5223.0], [64.8, 5225.0], [64.9, 5228.0], [65.0, 5230.0], [65.1, 5232.0], [65.2, 5236.0], [65.3, 5238.0], [65.4, 5241.0], [65.5, 5243.0], [65.6, 5245.0], [65.7, 5248.0], [65.8, 5250.0], [65.9, 5252.0], [66.0, 5256.0], [66.1, 5258.0], [66.2, 5261.0], [66.3, 5264.0], [66.4, 5266.0], [66.5, 5268.0], [66.6, 5272.0], [66.7, 5275.0], [66.8, 5278.0], [66.9, 5281.0], [67.0, 5286.0], [67.1, 5289.0], [67.2, 5292.0], [67.3, 5295.0], [67.4, 5298.0], [67.5, 5301.0], [67.6, 5305.0], [67.7, 5308.0], [67.8, 5311.0], [67.9, 5314.0], [68.0, 5318.0], [68.1, 5322.0], [68.2, 5324.0], [68.3, 5329.0], [68.4, 5331.0], [68.5, 5335.0], [68.6, 5339.0], [68.7, 5342.0], [68.8, 5346.0], [68.9, 5349.0], [69.0, 5352.0], [69.1, 5356.0], [69.2, 5359.0], [69.3, 5362.0], [69.4, 5365.0], [69.5, 5368.0], [69.6, 5372.0], [69.7, 5375.0], [69.8, 5378.0], [69.9, 5382.0], [70.0, 5386.0], [70.1, 5389.0], [70.2, 5394.0], [70.3, 5397.0], [70.4, 5401.0], [70.5, 5405.0], [70.6, 5408.0], [70.7, 5411.0], [70.8, 5416.0], [70.9, 5419.0], [71.0, 5423.0], [71.1, 5428.0], [71.2, 5431.0], [71.3, 5434.0], [71.4, 5437.0], [71.5, 5440.0], [71.6, 5443.0], [71.7, 5446.0], [71.8, 5448.0], [71.9, 5452.0], [72.0, 5455.0], [72.1, 5458.0], [72.2, 5461.0], [72.3, 5465.0], [72.4, 5468.0], [72.5, 5471.0], [72.6, 5473.0], [72.7, 5477.0], [72.8, 5480.0], [72.9, 5483.0], [73.0, 5487.0], [73.1, 5490.0], [73.2, 5493.0], [73.3, 5496.0], [73.4, 5500.0], [73.5, 5503.0], [73.6, 5506.0], [73.7, 5509.0], [73.8, 5512.0], [73.9, 5516.0], [74.0, 5520.0], [74.1, 5523.0], [74.2, 5527.0], [74.3, 5530.0], [74.4, 5535.0], [74.5, 5539.0], [74.6, 5542.0], [74.7, 5545.0], [74.8, 5548.0], [74.9, 5551.0], [75.0, 5554.0], [75.1, 5557.0], [75.2, 5561.0], [75.3, 5565.0], [75.4, 5568.0], [75.5, 5572.0], [75.6, 5575.0], [75.7, 5578.0], [75.8, 5582.0], [75.9, 5586.0], [76.0, 5589.0], [76.1, 5592.0], [76.2, 5596.0], [76.3, 5600.0], [76.4, 5602.0], [76.5, 5606.0], [76.6, 5609.0], [76.7, 5611.0], [76.8, 5614.0], [76.9, 5617.0], [77.0, 5620.0], [77.1, 5623.0], [77.2, 5626.0], [77.3, 5629.0], [77.4, 5632.0], [77.5, 5635.0], [77.6, 5638.0], [77.7, 5641.0], [77.8, 5645.0], [77.9, 5648.0], [78.0, 5652.0], [78.1, 5655.0], [78.2, 5659.0], [78.3, 5663.0], [78.4, 5666.0], [78.5, 5671.0], [78.6, 5674.0], [78.7, 5677.0], [78.8, 5680.0], [78.9, 5684.0], [79.0, 5687.0], [79.1, 5690.0], [79.2, 5692.0], [79.3, 5697.0], [79.4, 5700.0], [79.5, 5704.0], [79.6, 5708.0], [79.7, 5712.0], [79.8, 5716.0], [79.9, 5720.0], [80.0, 5724.0], [80.1, 5729.0], [80.2, 5731.0], [80.3, 5734.0], [80.4, 5737.0], [80.5, 5740.0], [80.6, 5744.0], [80.7, 5747.0], [80.8, 5751.0], [80.9, 5754.0], [81.0, 5757.0], [81.1, 5761.0], [81.2, 5764.0], [81.3, 5767.0], [81.4, 5770.0], [81.5, 5774.0], [81.6, 5777.0], [81.7, 5781.0], [81.8, 5784.0], [81.9, 5788.0], [82.0, 5791.0], [82.1, 5794.0], [82.2, 5798.0], [82.3, 5800.0], [82.4, 5803.0], [82.5, 5806.0], [82.6, 5810.0], [82.7, 5812.0], [82.8, 5816.0], [82.9, 5819.0], [83.0, 5822.0], [83.1, 5825.0], [83.2, 5830.0], [83.3, 5832.0], [83.4, 5835.0], [83.5, 5838.0], [83.6, 5840.0], [83.7, 5844.0], [83.8, 5848.0], [83.9, 5851.0], [84.0, 5855.0], [84.1, 5858.0], [84.2, 5860.0], [84.3, 5863.0], [84.4, 5867.0], [84.5, 5870.0], [84.6, 5873.0], [84.7, 5876.0], [84.8, 5879.0], [84.9, 5881.0], [85.0, 5884.0], [85.1, 5887.0], [85.2, 5890.0], [85.3, 5893.0], [85.4, 5896.0], [85.5, 5899.0], [85.6, 5901.0], [85.7, 5904.0], [85.8, 5907.0], [85.9, 5910.0], [86.0, 5912.0], [86.1, 5914.0], [86.2, 5918.0], [86.3, 5920.0], [86.4, 5923.0], [86.5, 5926.0], [86.6, 5929.0], [86.7, 5932.0], [86.8, 5935.0], [86.9, 5936.0], [87.0, 5939.0], [87.1, 5942.0], [87.2, 5944.0], [87.3, 5946.0], [87.4, 5949.0], [87.5, 5951.0], [87.6, 5953.0], [87.7, 5955.0], [87.8, 5958.0], [87.9, 5961.0], [88.0, 5964.0], [88.1, 5966.0], [88.2, 5968.0], [88.3, 5971.0], [88.4, 5973.0], [88.5, 5975.0], [88.6, 5977.0], [88.7, 5980.0], [88.8, 5982.0], [88.9, 5985.0], [89.0, 5987.0], [89.1, 5990.0], [89.2, 5991.0], [89.3, 5994.0], [89.4, 5997.0], [89.5, 6000.0], [89.6, 6002.0], [89.7, 6004.0], [89.8, 6007.0], [89.9, 6009.0], [90.0, 6012.0], [90.1, 6014.0], [90.2, 6017.0], [90.3, 6018.0], [90.4, 6021.0], [90.5, 6023.0], [90.6, 6025.0], [90.7, 6028.0], [90.8, 6029.0], [90.9, 6032.0], [91.0, 6034.0], [91.1, 6035.0], [91.2, 6038.0], [91.3, 6041.0], [91.4, 6043.0], [91.5, 6045.0], [91.6, 6047.0], [91.7, 6049.0], [91.8, 6051.0], [91.9, 6054.0], [92.0, 6056.0], [92.1, 6058.0], [92.2, 6061.0], [92.3, 6063.0], [92.4, 6065.0], [92.5, 6067.0], [92.6, 6069.0], [92.7, 6071.0], [92.8, 6073.0], [92.9, 6075.0], [93.0, 6076.0], [93.1, 6079.0], [93.2, 6081.0], [93.3, 6083.0], [93.4, 6085.0], [93.5, 6088.0], [93.6, 6090.0], [93.7, 6092.0], [93.8, 6095.0], [93.9, 6097.0], [94.0, 6099.0], [94.1, 6101.0], [94.2, 6103.0], [94.3, 6105.0], [94.4, 6107.0], [94.5, 6109.0], [94.6, 6112.0], [94.7, 6114.0], [94.8, 6116.0], [94.9, 6119.0], [95.0, 6121.0], [95.1, 6124.0], [95.2, 6126.0], [95.3, 6129.0], [95.4, 6131.0], [95.5, 6134.0], [95.6, 6137.0], [95.7, 6140.0], [95.8, 6143.0], [95.9, 6146.0], [96.0, 6149.0], [96.1, 6153.0], [96.2, 6155.0], [96.3, 6158.0], [96.4, 6163.0], [96.5, 6166.0], [96.6, 6171.0], [96.7, 6175.0], [96.8, 6179.0], [96.9, 6183.0], [97.0, 6187.0], [97.1, 6191.0], [97.2, 6195.0], [97.3, 6199.0], [97.4, 6204.0], [97.5, 6209.0], [97.6, 6215.0], [97.7, 6221.0], [97.8, 6229.0], [97.9, 6235.0], [98.0, 6240.0], [98.1, 6245.0], [98.2, 6253.0], [98.3, 6261.0], [98.4, 6270.0], [98.5, 6277.0], [98.6, 6286.0], [98.7, 6294.0], [98.8, 6305.0], [98.9, 6315.0], [99.0, 6327.0], [99.1, 6340.0], [99.2, 6360.0], [99.3, 6384.0], [99.4, 6412.0], [99.5, 6453.0], [99.6, 6497.0], [99.7, 6546.0], [99.8, 6635.0], [99.9, 6729.0], [100.0, 7037.0]], "isOverall": false, "label": "move to login page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6640.0, "series": [{"data": [[0.0, 1186.0], [2500.0, 1858.0], [3000.0, 1911.0], [3500.0, 1775.0], [1000.0, 1235.0], [4000.0, 1730.0], [4500.0, 2334.0], [5000.0, 6640.0], [5500.0, 5656.0], [1500.0, 1117.0], [6000.0, 6121.0], [6500.0, 1060.0], [7000.0, 34.0], [7500.0, 2.0], [500.0, 2383.0], [2000.0, 1492.0]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[0.0, 1961.0], [2500.0, 2063.0], [3000.0, 1845.0], [3500.0, 1682.0], [1000.0, 1670.0], [4000.0, 1847.0], [4500.0, 4807.0], [5000.0, 6368.0], [5500.0, 5932.0], [1500.0, 1743.0], [6000.0, 3722.0], [6500.0, 144.0], [7000.0, 1.0], [500.0, 1194.0], [2000.0, 1839.0]], "isOverall": false, "label": "move to login page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 7500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3153.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 53604.0, "series": [{"data": [[2.0, 10115.0]], "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 53604.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[0.0, 3153.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6480.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 113.82558907729576, "minX": 1.49607684E12, "maxY": 700.0, "series": [{"data": [[1.49607702E12, 661.0428169014095], [1.49607684E12, 113.82558907729576], [1.49607732E12, 680.4248152359285], [1.49607714E12, 700.0], [1.49607696E12, 475.50828259946104], [1.49607744E12, 167.9603159314203], [1.49607726E12, 700.0], [1.49607708E12, 700.0], [1.4960769E12, 275.9310344827584], [1.49607738E12, 435.5581884464395], [1.4960772E12, 700.0]], "isOverall": false, "label": "Login as a doctor ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.49607744E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.0, "minX": 2.0, "maxY": 6616.0, "series": [{"data": [[2.0, 96.5], [3.0, 91.0], [5.0, 217.66666666666669], [8.0, 351.0], [9.0, 101.0], [10.0, 291.5], [11.0, 492.0], [12.0, 491.0], [13.0, 472.0], [14.0, 451.0], [15.0, 433.6666666666667], [16.0, 420.0], [17.0, 416.0], [19.0, 2100.0], [23.0, 396.0], [27.0, 368.0], [28.0, 2047.0], [29.0, 2038.5], [31.0, 2001.0], [33.0, 2007.5], [35.0, 1975.0], [34.0, 2005.0], [36.0, 1974.0], [39.0, 2086.0], [38.0, 2050.0], [40.0, 178.0], [45.0, 1881.0], [44.0, 1971.0], [47.0, 1804.0], [46.0, 2112.0], [49.0, 2179.0], [48.0, 2136.0], [50.0, 385.68627450980387], [51.0, 2062.0], [53.0, 719.2], [52.0, 2003.0], [55.0, 264.93548387096774], [57.0, 378.5], [56.0, 442.0], [58.0, 377.5714285714286], [60.0, 291.9072164948454], [61.0, 550.4285714285714], [63.0, 425.5], [62.0, 538.6], [66.0, 545.0], [65.0, 465.8108108108109], [64.0, 428.0], [70.0, 387.79411764705895], [71.0, 723.8421052631579], [69.0, 488.3333333333333], [68.0, 586.0], [75.0, 641.2499999999999], [74.0, 572.8333333333333], [73.0, 753.0], [72.0, 712.25], [79.0, 587.0], [78.0, 567.5], [77.0, 695.0], [76.0, 783.1428571428571], [80.0, 421.07296137339057], [83.0, 98.0], [81.0, 643.3636363636364], [86.0, 820.875], [85.0, 632.3555555555556], [84.0, 928.6666666666667], [90.0, 493.79487179487177], [91.0, 575.0], [89.0, 654.3333333333334], [88.0, 1043.5], [95.0, 692.5263157894738], [94.0, 588.25], [93.0, 582.6666666666666], [92.0, 903.5333333333333], [99.0, 423.0], [98.0, 428.3333333333333], [97.0, 776.6428571428572], [96.0, 847.0], [100.0, 623.9230769230767], [103.0, 1006.0], [102.0, 737.0256410256409], [101.0, 412.75], [107.0, 867.6249999999999], [106.0, 942.2727272727273], [105.0, 1337.0], [104.0, 1224.0], [110.0, 734.4814814814819], [111.0, 1282.0], [108.0, 788.2500000000001], [115.0, 1059.9487179487182], [114.0, 711.8], [112.0, 786.0], [119.0, 773.0], [118.0, 735.2941176470588], [117.0, 915.1538461538462], [116.0, 817.0], [120.0, 721.5762711864412], [123.0, 643.5], [122.0, 597.0], [121.0, 1496.0], [126.0, 1021.8947368421052], [125.0, 1066.0400000000002], [130.0, 816.408602150538], [135.0, 1056.6842105263156], [133.0, 638.2857142857143], [132.0, 710.6774193548387], [131.0, 649.6666666666666], [129.0, 674.8571428571428], [128.0, 953.75], [140.0, 910.3494623655915], [143.0, 796.4166666666667], [142.0, 441.375], [141.0, 801.8909090909091], [139.0, 1455.75], [138.0, 1913.0], [137.0, 1904.3333333333333], [136.0, 1983.6000000000001], [150.0, 908.0781250000002], [151.0, 1495.8333333333333], [149.0, 1373.181818181818], [148.0, 1510.6666666666667], [147.0, 1124.2222222222224], [144.0, 1283.2857142857144], [159.0, 2125.3333333333335], [158.0, 1646.4999999999998], [156.0, 664.4], [155.0, 768.3888888888889], [154.0, 992.4285714285716], [153.0, 1014.1538461538461], [152.0, 1568.7], [160.0, 945.0107526881721], [167.0, 826.15625], [166.0, 838.0], [165.0, 1113.388888888889], [164.0, 1153.6666666666667], [163.0, 1576.736842105263], [162.0, 1956.8125], [161.0, 2473.8], [170.0, 920.2154696132599], [175.0, 1100.5], [174.0, 791.0], [173.0, 1873.375], [172.0, 2795.0], [169.0, 728.875], [168.0, 690.0666666666667], [180.0, 913.9669421487603], [183.0, 872.7272727272726], [182.0, 778.65], [181.0, 1080.0], [179.0, 1618.9062500000002], [178.0, 1588.0], [177.0, 2338.0], [190.0, 1016.2558139534889], [191.0, 929.3235294117648], [189.0, 1816.3333333333333], [188.0, 1989.5], [187.0, 1933.5], [186.0, 2173.4545454545455], [185.0, 960.9999999999999], [184.0, 860.8888888888889], [199.0, 1804.4117647058827], [198.0, 1227.8333333333335], [197.0, 1380.2500000000002], [196.0, 1187.1666666666665], [195.0, 1084.857142857143], [194.0, 911.875], [193.0, 957.1250000000001], [200.0, 1564.743902439025], [206.0, 2677.0], [205.0, 2734.0], [204.0, 2795.0], [203.0, 2251.5], [202.0, 1978.6666666666667], [201.0, 2317.0], [210.0, 1535.771929824561], [215.0, 1505.5], [214.0, 1238.0], [213.0, 742.225806451613], [211.0, 1018.2999999999998], [209.0, 974.0], [208.0, 2290.6944444444453], [220.0, 1493.0054054054049], [223.0, 1911.051282051282], [222.0, 2637.5384615384614], [221.0, 2691.0], [218.0, 1736.5555555555557], [217.0, 1519.8947368421054], [216.0, 1632.5], [230.0, 1548.7823529411767], [231.0, 1815.8000000000002], [229.0, 1617.3611111111109], [228.0, 802.6666666666666], [227.0, 1197.4897959183677], [226.0, 951.4], [225.0, 1870.0], [224.0, 1667.814814814815], [239.0, 2171.0], [238.0, 2357.8], [237.0, 1823.8333333333333], [236.0, 2384.8333333333335], [235.0, 2437.0], [234.0, 2332.2999999999997], [233.0, 2085.0769230769233], [240.0, 1849.7819148936164], [247.0, 1603.388888888889], [246.0, 1650.9375], [245.0, 1815.75], [244.0, 1760.0], [243.0, 1547.1176470588234], [242.0, 1109.5], [241.0, 1435.6842105263156], [250.0, 1670.31052631579], [255.0, 1885.0], [254.0, 2105.5], [253.0, 2166.652173913044], [252.0, 2144.0], [249.0, 2117.25], [248.0, 1862.7878787878788], [270.0, 2077.5172413793102], [260.0, 1964.7938596491229], [261.0, 2050.5], [263.0, 2166.6666666666665], [257.0, 2079.3333333333335], [256.0, 2145.368421052631], [259.0, 1821.0], [258.0, 922.0], [262.0, 2089.5], [271.0, 2246.9705882352946], [269.0, 2215.0833333333335], [268.0, 2239.875], [267.0, 2198.2], [266.0, 2252.9333333333334], [265.0, 2205.2], [264.0, 2133.0], [287.0, 2227.571428571429], [280.0, 2056.6192893401007], [286.0, 2178.5], [285.0, 2123.5], [283.0, 2297.5], [282.0, 2285.8181818181815], [281.0, 2334.0], [279.0, 2010.0], [273.0, 2395.8888888888887], [272.0, 2208.4999999999995], [275.0, 2144.0], [274.0, 2414.5], [278.0, 2237.291666666667], [277.0, 2391.0000000000005], [276.0, 2443.7499999999995], [302.0, 2444.285714285714], [290.0, 1957.225641025641], [289.0, 2396.8], [288.0, 2410.9876543209875], [291.0, 2385.6666666666665], [295.0, 2425.6666666666665], [294.0, 2472.0], [293.0, 2420.0], [292.0, 2441.0], [300.0, 1979.8917197452224], [303.0, 2384.176470588235], [301.0, 2408.6153846153848], [299.0, 2381.0], [298.0, 2484.4285714285716], [297.0, 2515.7272727272725], [296.0, 2494.0499999999997], [318.0, 2586.7500000000005], [305.0, 2372.2], [310.0, 2660.6285714285723], [309.0, 2529.3750000000005], [308.0, 2469.83870967742], [311.0, 2657.0], [304.0, 2347.75], [319.0, 2566.5], [317.0, 2750.6296296296305], [316.0, 2730.8125000000005], [307.0, 2300.0], [306.0, 2313.0625], [315.0, 2500.5], [314.0, 2592.6363636363635], [313.0, 2588.4545454545455], [312.0, 2694.5], [334.0, 2737.2], [320.0, 2218.260869565218], [321.0, 2543.75], [323.0, 2496.833333333333], [322.0, 2652.375], [330.0, 2933.4074074074074], [333.0, 2940.0], [332.0, 2737.5], [331.0, 2688.625], [329.0, 2761.0], [328.0, 2588.8888888888887], [327.0, 2789.0], [326.0, 2824.0], [325.0, 2660.821428571429], [324.0, 2657.0], [348.0, 2836.5714285714284], [350.0, 3009.76404494382], [340.0, 2351.385026737969], [351.0, 2877.756097560976], [349.0, 2888.7333333333336], [347.0, 2707.2], [344.0, 2850.761904761905], [342.0, 2943.909090909091], [337.0, 3049.0], [336.0, 2902.25], [339.0, 2903.684210526316], [338.0, 2950.1200000000003], [341.0, 2928.7499999999995], [367.0, 3114.125], [360.0, 2625.488372093024], [366.0, 3155.0], [365.0, 3201.3333333333335], [364.0, 3198.3333333333335], [355.0, 2970.0], [354.0, 2960.8750000000005], [353.0, 2983.4615384615386], [352.0, 2964.555555555556], [363.0, 3024.6666666666665], [362.0, 2837.0], [361.0, 2891.4666666666662], [359.0, 2952.8181818181815], [358.0, 3018.25], [357.0, 3079.6666666666665], [356.0, 2986.864864864865], [382.0, 3158.6666666666665], [370.0, 3237.059782608696], [369.0, 3076.222222222222], [368.0, 3159.714285714286], [371.0, 3107.470588235294], [375.0, 3173.875], [374.0, 3295.25], [373.0, 3257.0277777777774], [372.0, 3420.0], [380.0, 2694.8994974874386], [383.0, 3198.0], [381.0, 3186.6], [379.0, 3371.6153846153843], [378.0, 3397.3999999999996], [377.0, 3463.4444444444443], [376.0, 3272.416666666667], [398.0, 3192.0], [390.0, 3324.06976744186], [389.0, 3133.6666666666665], [388.0, 3270.0], [391.0, 3306.4], [385.0, 3305.2307692307695], [387.0, 3184.5], [386.0, 3214.1666666666665], [399.0, 3359.0], [397.0, 2987.0], [396.0, 2780.0], [395.0, 2947.325], [394.0, 2958.9523809523807], [393.0, 3262.6666666666665], [392.0, 3277.833333333333], [415.0, 3439.68], [400.0, 2782.7103825136614], [407.0, 3316.8846153846152], [405.0, 3152.5], [404.0, 3307.4999999999995], [410.0, 3512.47894736842], [414.0, 3655.818181818182], [413.0, 3628.0], [412.0, 3443.6], [403.0, 3370.0], [402.0, 3117.0], [401.0, 3244.866666666667], [411.0, 3542.0222222222224], [409.0, 3820.1428571428573], [408.0, 3835.0], [429.0, 3687.9166666666665], [420.0, 3072.168674698795], [430.0, 3352.355329949238], [428.0, 3492.2999999999993], [419.0, 3490.0], [418.0, 3396.4285714285716], [417.0, 3560.3333333333335], [416.0, 3306.5], [426.0, 3355.071428571429], [425.0, 3529.0], [424.0, 3190.3], [423.0, 3299.0526315789475], [422.0, 3467.1428571428573], [421.0, 3641.2666666666664], [447.0, 4022.5], [440.0, 3604.485029940121], [446.0, 3991.8181818181815], [445.0, 4173.5], [444.0, 4083.0], [435.0, 3654.333333333333], [434.0, 3574.0], [433.0, 3585.6666666666665], [432.0, 3506.3333333333335], [443.0, 3929.25], [442.0, 3675.5], [441.0, 3792.5], [438.0, 3783.0], [437.0, 3759.0], [436.0, 3796.0], [462.0, 3882.6666666666665], [450.0, 3198.1326530612205], [449.0, 3936.1842105263154], [448.0, 3922.2857142857147], [451.0, 3865.0625000000005], [460.0, 4008.980198019804], [463.0, 3930.0], [461.0, 3871.363636363637], [459.0, 3811.9999999999995], [457.0, 3733.0], [456.0, 3717.0], [455.0, 3858.3125], [454.0, 3780.0], [453.0, 3830.6666666666665], [452.0, 3874.0], [478.0, 4218.0], [470.0, 3342.2248520710073], [469.0, 3709.225352112677], [468.0, 3748.0], [471.0, 3860.3636363636365], [465.0, 3762.0], [464.0, 3796.090909090909], [467.0, 3632.3333333333335], [466.0, 3716.6200000000003], [479.0, 4088.875], [477.0, 3962.8571428571427], [476.0, 3996.1111111111113], [475.0, 4015.0], [474.0, 4034.5], [473.0, 4042.6923076923076], [472.0, 3982.4166666666665], [495.0, 4364.324324324326], [480.0, 3853.5221674876852], [487.0, 4388.666666666667], [486.0, 4619.357142857143], [485.0, 4609.285714285715], [484.0, 4452.733333333334], [490.0, 4143.920529801325], [494.0, 4502.333333333333], [493.0, 4463.428571428571], [492.0, 4467.405405405406], [483.0, 4185.0], [482.0, 4253.625], [481.0, 4330.0], [491.0, 4468.615384615385], [489.0, 4430.5], [488.0, 4372.916666666666], [510.0, 4307.597989949752], [500.0, 3570.032432432434], [501.0, 4288.285714285715], [503.0, 4055.3333333333335], [496.0, 4390.5], [499.0, 4376.740740740741], [497.0, 4271.666666666667], [502.0, 4162.666666666667], [511.0, 4003.681818181818], [509.0, 4000.0], [508.0, 4001.846153846154], [507.0, 3948.3333333333335], [506.0, 4056.5], [505.0, 4086.702702702703], [504.0, 4179.499999999999], [536.0, 5063.090909090909], [540.0, 4625.120603015076], [520.0, 4143.393548387098], [521.0, 4405.578947368422], [524.0, 4650.083333333333], [522.0, 4039.5], [526.0, 4809.0], [512.0, 3828.727272727273], [514.0, 3928.8999999999996], [513.0, 3892.7727272727275], [516.0, 3979.6666666666665], [515.0, 3996.428571428571], [519.0, 4188.794871794873], [517.0, 3924.4666666666667], [525.0, 4752.666666666667], [530.0, 3772.2871794871803], [529.0, 4852.916666666667], [531.0, 4894.523809523809], [533.0, 5068.222222222222], [532.0, 4916.625], [535.0, 5002.727272727273], [534.0, 5012.500000000001], [543.0, 4673.0], [542.0, 4954.833333333333], [541.0, 4821.0], [539.0, 4808.000000000001], [538.0, 4839.0], [537.0, 4914.576923076924], [550.0, 4223.828571428573], [572.0, 5220.333333333333], [546.0, 4756.666666666667], [545.0, 4758.333333333334], [544.0, 4899.812500000001], [547.0, 4732.142857142857], [549.0, 4581.861111111111], [548.0, 4718.5], [559.0, 4375.2692307692305], [558.0, 4097.0], [557.0, 4543.0], [556.0, 4436.0], [555.0, 4365.724137931034], [554.0, 4594.799999999999], [553.0, 4673.5], [552.0, 4565.846153846153], [560.0, 4147.054945054945], [564.0, 4512.200000000001], [563.0, 4288.666666666666], [567.0, 4866.0], [565.0, 4561.8421052631575], [570.0, 5008.1840796019915], [574.0, 5417.125], [573.0, 5336.5], [571.0, 5276.51724137931], [569.0, 5128.857142857143], [568.0, 4771.333333333334], [551.0, 4529.0], [604.0, 4803.366666666666], [580.0, 4716.235714285712], [590.0, 4204.182320441988], [589.0, 5559.0], [588.0, 5548.6], [587.0, 5487.0], [586.0, 5740.299999999999], [585.0, 5629.75], [584.0, 5537.814814814815], [591.0, 5518.666666666667], [577.0, 5164.5], [576.0, 5351.749999999999], [579.0, 5411.65], [578.0, 5426.0], [600.0, 4984.968325791856], [583.0, 5423.833333333333], [582.0, 5358.299999999999], [581.0, 5187.0], [601.0, 5035.833333333334], [607.0, 4769.275862068963], [593.0, 5583.0], [592.0, 5523.571428571428], [595.0, 5469.837209302327], [594.0, 5615.0], [597.0, 5269.125000000001], [596.0, 5258.103448275862], [599.0, 5161.833333333333], [598.0, 5202.166666666666], [606.0, 4889.800000000001], [605.0, 4833.25], [603.0, 4891.416666666667], [602.0, 4971.5], [637.0, 5974.083333333333], [610.0, 5190.281914893614], [620.0, 4345.538461538457], [619.0, 4926.875], [618.0, 4944.142857142857], [617.0, 4797.769230769231], [616.0, 4831.909090909091], [621.0, 5133.333333333333], [623.0, 5221.357142857143], [608.0, 4601.526315789473], [622.0, 5078.5], [630.0, 4901.4132653061215], [629.0, 5606.181818181818], [628.0, 5755.888888888889], [627.0, 5759.0], [625.0, 5451.25], [624.0, 5578.944444444444], [631.0, 5681.727272727273], [639.0, 5813.4], [638.0, 6111.375], [636.0, 5805.750000000001], [635.0, 5239.0], [634.0, 5422.0], [633.0, 5988.999999999999], [632.0, 5941.0], [615.0, 4741.708333333335], [614.0, 4634.299999999999], [611.0, 4693.958333333333], [664.0, 5263.076923076923], [668.0, 5346.0], [640.0, 5758.863157894737], [650.0, 5149.918367346938], [649.0, 5901.0], [648.0, 5938.680000000001], [651.0, 5806.720000000002], [653.0, 5574.761904761906], [652.0, 5749.8], [655.0, 5376.285714285715], [654.0, 5433.857142857142], [660.0, 4704.005291005292], [663.0, 5238.0], [662.0, 5298.064516129032], [667.0, 5128.679999999999], [670.0, 5546.768844221105], [671.0, 5294.0], [657.0, 5404.236842105263], [656.0, 5392.0], [659.0, 5446.857142857142], [658.0, 5323.400000000001], [669.0, 5076.25], [666.0, 5211.04347826087], [665.0, 5294.789473684211], [647.0, 6041.527777777778], [646.0, 6146.0], [645.0, 5963.5], [644.0, 6202.75], [643.0, 6118.333333333334], [642.0, 5914.4], [641.0, 5918.833333333333], [698.0, 6362.187499999997], [678.0, 5787.25], [680.0, 6051.171428571427], [682.0, 5760.0], [681.0, 5677.0], [684.0, 6264.0], [683.0, 5988.277777777778], [687.0, 5589.0], [673.0, 5448.6], [672.0, 5334.454545454546], [675.0, 5741.3], [674.0, 5241.0], [677.0, 5663.25], [676.0, 5562.571428571428], [685.0, 6008.814814814814], [690.0, 5024.5733333333355], [689.0, 6302.240000000001], [688.0, 6080.166666666666], [691.0, 6616.0], [693.0, 6407.125000000001], [692.0, 6318.8], [700.0, 5779.567680180197], [699.0, 6299.0], [697.0, 6358.675324675324], [696.0, 6210.333333333332], [679.0, 5597.428571428572], [695.0, 6352.5], [694.0, 6354.25]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[532.808862976952, 4337.528877210246]], "isOverall": false, "label": "login as doctor-Aggregated", "isController": false}, {"data": [[4.0, 18.0], [5.0, 81.6], [10.0, 25.666666666666668], [13.0, 29.0], [17.0, 58.0], [18.0, 411.0], [20.0, 407.0], [21.0, 406.0], [22.0, 399.0], [24.0, 395.0], [25.0, 390.0], [26.0, 382.0], [30.0, 266.0], [32.0, 261.0], [37.0, 232.0], [41.0, 1772.0], [43.0, 1893.0], [42.0, 1801.0], [44.0, 1829.0], [50.0, 626.0454545454546], [52.0, 22.0], [53.0, 131.0], [55.0, 104.65384615384616], [54.0, 257.0], [57.0, 158.0], [59.0, 189.0], [58.0, 157.0], [60.0, 107.83333333333336], [61.0, 191.8], [63.0, 171.5], [62.0, 237.79999999999998], [67.0, 170.0], [66.0, 269.7], [65.0, 126.25641025641023], [64.0, 63.0], [70.0, 174.54545454545456], [71.0, 153.09090909090912], [69.0, 185.2], [68.0, 238.66666666666669], [75.0, 362.0], [74.0, 239.4], [73.0, 249.66666666666666], [72.0, 445.25], [79.0, 252.7142857142857], [78.0, 241.94444444444443], [76.0, 125.46153846153847], [80.0, 231.45454545454544], [83.0, 286.0], [82.0, 276.7142857142857], [81.0, 139.38888888888889], [87.0, 181.5], [86.0, 217.2], [85.0, 324.46874999999994], [84.0, 483.75], [90.0, 313.17488789237683], [91.0, 417.2307692307692], [89.0, 301.3636363636364], [88.0, 184.0], [95.0, 491.0], [94.0, 290.8], [93.0, 292.0], [92.0, 468.53846153846155], [99.0, 735.0], [98.0, 813.1764705882352], [97.0, 586.4705882352941], [96.0, 547.3478260869566], [100.0, 407.3232323232324], [102.0, 666.0714285714286], [107.0, 828.4166666666667], [106.0, 684.5999999999999], [104.0, 935.0], [110.0, 464.97701149425296], [111.0, 506.6666666666667], [109.0, 562.0], [108.0, 574.0], [115.0, 637.5], [114.0, 707.4705882352941], [113.0, 933.0], [112.0, 939.0], [118.0, 422.6], [117.0, 704.6111111111112], [116.0, 1012.2222222222222], [120.0, 559.7991071428572], [123.0, 868.7499999999999], [121.0, 639.5], [127.0, 1171.0], [126.0, 724.1904761904764], [125.0, 965.5277777777779], [124.0, 1057.111111111111], [130.0, 605.8449197860962], [135.0, 995.4901960784314], [134.0, 666.0], [133.0, 634.2307692307693], [132.0, 745.0], [129.0, 1133.0], [128.0, 909.3333333333334], [140.0, 681.6358974358974], [143.0, 1787.0], [141.0, 990.3571428571427], [139.0, 1077.8333333333333], [138.0, 1262.9999999999998], [137.0, 606.0], [150.0, 776.6408839779003], [149.0, 1278.5416666666665], [148.0, 867.8333333333331], [147.0, 1046.3999999999999], [146.0, 1116.0], [145.0, 1043.0], [144.0, 1294.5], [158.0, 1155.2307692307697], [157.0, 811.0], [156.0, 730.6666666666666], [155.0, 846.4], [154.0, 720.6666666666666], [153.0, 1447.9166666666665], [152.0, 1328.0], [160.0, 1046.9214659685863], [166.0, 897.0], [165.0, 1217.0], [164.0, 1967.6], [163.0, 1781.8461538461538], [162.0, 1820.5882352941176], [161.0, 2092.333333333333], [170.0, 1285.3551912568305], [175.0, 894.5], [174.0, 1131.0833333333333], [173.0, 1668.4594594594591], [172.0, 1178.6818181818185], [171.0, 1016.8571428571429], [169.0, 840.9473684210527], [168.0, 507.6666666666667], [180.0, 1547.125654450261], [183.0, 301.0], [182.0, 952.2], [179.0, 1388.3157894736844], [178.0, 1282.0], [176.0, 2292.0], [190.0, 1330.4273858921158], [191.0, 1495.0952380952383], [189.0, 2252.3571428571427], [188.0, 2017.8000000000002], [187.0, 1887.7777777777778], [186.0, 1555.6857142857143], [185.0, 974.3333333333333], [184.0, 780.7499999999999], [199.0, 1438.44], [198.0, 1179.6666666666667], [197.0, 1329.3846153846155], [196.0, 1437.0499999999997], [195.0, 1541.6666666666667], [194.0, 602.6666666666666], [193.0, 757.0], [200.0, 1601.6423841059598], [207.0, 2845.0], [206.0, 1881.9333333333332], [205.0, 1618.25], [204.0, 1646.7692307692307], [203.0, 1558.0], [202.0, 1540.0], [201.0, 1548.0], [210.0, 1431.6114649681533], [215.0, 1372.5], [214.0, 1300.4090909090908], [213.0, 860.2820512820512], [212.0, 1542.6666666666667], [211.0, 1351.2499999999998], [209.0, 2112.25], [208.0, 2516.875], [220.0, 1588.8558558558555], [223.0, 2444.6666666666665], [222.0, 2447.5], [219.0, 2014.7142857142858], [218.0, 1609.4347826086964], [217.0, 1450.0869565217388], [230.0, 1486.1453488372097], [231.0, 1711.4545454545455], [229.0, 1455.2941176470586], [228.0, 1666.0], [227.0, 1515.2051282051282], [226.0, 1329.75], [225.0, 1893.0], [224.0, 1861.4285714285716], [239.0, 2091.3333333333335], [238.0, 2088.0], [237.0, 2130.833333333333], [236.0, 2090.0], [235.0, 2141.0], [234.0, 2221.0], [233.0, 2022.3684210526314], [232.0, 1818.875], [240.0, 1717.9691358024693], [247.0, 1529.6666666666667], [246.0, 1902.7777777777778], [245.0, 1733.9655172413795], [244.0, 1432.3333333333333], [243.0, 1565.125], [241.0, 1868.909090909091], [250.0, 1748.9525862068967], [255.0, 2001.6470588235295], [254.0, 1845.6153846153848], [253.0, 1853.6875], [252.0, 1997.5], [251.0, 1788.0], [249.0, 1721.25], [248.0, 1603.7272727272725], [270.0, 1941.2318840579703], [260.0, 1675.6847290640383], [261.0, 1764.7142857142858], [263.0, 1828.0], [256.0, 2013.8888888888891], [259.0, 2041.5], [257.0, 2000.125], [262.0, 1777.3333333333333], [271.0, 1954.3076923076924], [269.0, 1998.0], [268.0, 1859.0], [267.0, 1884.0], [266.0, 1869.1578947368423], [265.0, 1761.2857142857142], [264.0, 1814.6363636363635], [287.0, 2259.2999999999997], [280.0, 2045.995305164319], [286.0, 2170.9], [285.0, 2044.5714285714287], [284.0, 1957.0], [275.0, 2165.0], [274.0, 2161.5], [273.0, 2123.8181818181815], [272.0, 2052.8333333333335], [283.0, 2118.6666666666665], [282.0, 2118.3333333333335], [281.0, 2147.6666666666665], [279.0, 1918.5], [278.0, 2132.4117647058824], [277.0, 2081.4285714285716], [276.0, 2115.3333333333335], [302.0, 2170.0], [290.0, 1659.7358490566041], [289.0, 2183.1111111111113], [288.0, 2099.7971014492764], [291.0, 2230.6666666666665], [294.0, 2266.0], [292.0, 2261.666666666667], [300.0, 2051.6254416961124], [303.0, 2084.5882352941176], [301.0, 2254.04], [299.0, 2190.0], [298.0, 2196.0], [297.0, 2163.6666666666665], [296.0, 2148.315789473684], [318.0, 2435.244444444445], [305.0, 1775.0], [310.0, 2458.2066115702473], [309.0, 2197.285714285714], [308.0, 2109.8823529411766], [311.0, 2265.3333333333335], [304.0, 1933.8333333333333], [319.0, 2553.5], [317.0, 2419.391304347826], [316.0, 2400.65], [307.0, 2232.0], [306.0, 2136.6756756756763], [315.0, 2309.857142857143], [314.0, 2351.5], [313.0, 2333.217391304348], [312.0, 2289.3333333333335], [334.0, 2437.9999999999995], [320.0, 2074.6481481481483], [321.0, 2246.0], [323.0, 2202.833333333333], [322.0, 2201.5], [330.0, 2576.596685082873], [333.0, 2360.0], [332.0, 2491.0], [331.0, 2465.6000000000004], [329.0, 2400.772727272727], [328.0, 2408.8333333333335], [327.0, 2545.5], [326.0, 2343.2], [325.0, 2339.961538461538], [324.0, 2350.1428571428573], [350.0, 2744.81818181818], [340.0, 2084.206896551724], [341.0, 2634.2941176470595], [343.0, 2679.0], [337.0, 2549.35], [336.0, 2498.0], [339.0, 2604.6363636363635], [338.0, 2627.217391304348], [342.0, 2672.4], [351.0, 2700.730769230769], [349.0, 2692.6], [348.0, 2687.0], [347.0, 2695.8125000000005], [346.0, 2656.0], [345.0, 2647.5], [344.0, 2672.555555555555], [365.0, 2874.0], [367.0, 2783.3333333333335], [358.0, 2806.333333333333], [357.0, 2787.0952380952385], [356.0, 2672.4523809523803], [360.0, 2370.7261146496794], [366.0, 2833.3333333333335], [364.0, 2819.7999999999997], [355.0, 2646.3000000000006], [354.0, 2621.923076923076], [353.0, 2527.875], [352.0, 2521.0], [363.0, 2667.1428571428573], [361.0, 2707.0], [359.0, 2813.6666666666665], [382.0, 2935.5], [370.0, 2936.3700000000003], [369.0, 2792.818181818182], [368.0, 2796.3333333333335], [371.0, 2786.9500000000007], [375.0, 2764.6666666666665], [374.0, 2952.3333333333335], [373.0, 3032.1428571428573], [372.0, 2911.2857142857138], [380.0, 2415.7647058823522], [383.0, 2945.4], [381.0, 2956.75], [379.0, 3034.6666666666665], [378.0, 3098.210526315789], [377.0, 3019.2941176470586], [376.0, 2578.269230769231], [398.0, 2910.0], [390.0, 3062.691891891893], [389.0, 2896.75], [388.0, 2915.0], [391.0, 2919.5454545454545], [385.0, 2949.534883720931], [384.0, 2986.3333333333335], [387.0, 2912.0], [386.0, 2994.916666666667], [399.0, 3026.6956521739135], [397.0, 2865.318181818182], [396.0, 2805.0], [395.0, 2643.709677419354], [394.0, 3164.5238095238096], [393.0, 2880.6666666666665], [392.0, 2918.5], [415.0, 3418.9090909090914], [400.0, 2548.2962962962965], [410.0, 3269.9551282051275], [414.0, 3204.6666666666665], [403.0, 2958.5], [402.0, 2966.0], [401.0, 3022.5714285714284], [411.0, 3343.425], [409.0, 3238.1538461538457], [408.0, 3282.416666666666], [407.0, 3192.622641509435], [406.0, 3137.0], [405.0, 3094.55], [404.0, 2962.6249999999995], [430.0, 3194.0079365079364], [420.0, 2798.0643776824054], [421.0, 3199.0833333333335], [423.0, 3217.461538461538], [416.0, 3122.72], [418.0, 2888.3636363636365], [417.0, 3124.5], [422.0, 3315.058823529411], [431.0, 3405.0], [429.0, 3413.1818181818185], [428.0, 3146.4202898550734], [427.0, 3103.5], [426.0, 3113.4838709677424], [425.0, 3124.0], [424.0, 3083.6], [447.0, 3663.0], [440.0, 3223.3041825095047], [446.0, 3645.882352941176], [445.0, 3754.5], [444.0, 3602.5], [435.0, 3575.5], [434.0, 3578.5], [433.0, 3547.857142857143], [432.0, 3479.875], [443.0, 3667.846153846154], [442.0, 3531.7000000000003], [441.0, 3410.8888888888887], [439.0, 3468.0], [438.0, 3476.5769230769233], [436.0, 3537.3333333333335], [462.0, 3471.5], [450.0, 2933.920000000001], [449.0, 3819.75], [448.0, 3834.097560975611], [451.0, 3604.611111111111], [455.0, 3493.2], [454.0, 3573.0], [453.0, 3573.0], [452.0, 3639.0], [460.0, 3745.013636363635], [461.0, 3463.5714285714284], [463.0, 3598.0], [459.0, 3474.6000000000004], [458.0, 3502.0], [457.0, 3500.125], [456.0, 3474.1111111111113], [478.0, 3747.0], [470.0, 3102.677725118484], [469.0, 3434.9999999999995], [468.0, 3346.5], [471.0, 3568.8857142857146], [465.0, 3539.0], [464.0, 3552.8888888888887], [467.0, 3512.0], [466.0, 3483.6874999999995], [479.0, 3772.9090909090905], [477.0, 3769.2], [476.0, 3791.75], [475.0, 3633.0], [474.0, 3708.75], [473.0, 3684.6923076923076], [472.0, 3650.428571428571], [493.0, 4178.5], [495.0, 4070.9473684210525], [480.0, 3673.330578512398], [490.0, 3805.1884615384597], [494.0, 4240.0], [492.0, 4245.363636363636], [483.0, 3881.2631578947367], [482.0, 3898.375], [481.0, 3901.5], [491.0, 4072.9230769230767], [488.0, 4014.625], [487.0, 4227.2], [486.0, 4065.6111111111104], [485.0, 4063.0000000000005], [484.0, 3945.904761904761], [510.0, 4219.2741935483855], [500.0, 3254.1258278145715], [502.0, 4083.1764705882356], [511.0, 3692.083333333333], [508.0, 3754.5555555555557], [499.0, 4013.692307692308], [498.0, 4105.444444444444], [497.0, 4027.7142857142853], [507.0, 3760.833333333333], [506.0, 3768.3333333333335], [505.0, 3864.0625], [504.0, 3993.6666666666665], [503.0, 4066.8333333333335], [536.0, 4724.41935483871], [528.0, 4193.75], [520.0, 3838.152777777778], [521.0, 3990.1875000000005], [523.0, 4196.799999999999], [522.0, 4133.416666666667], [525.0, 4309.8125], [524.0, 4347.5], [527.0, 4332.0], [513.0, 3788.1904761904766], [512.0, 3700.9599999999996], [515.0, 3938.833333333333], [514.0, 3783.7200000000003], [517.0, 3825.4999999999995], [516.0, 3810.5], [519.0, 3930.065217391304], [518.0, 3907.0], [526.0, 4351.999999999999], [530.0, 3523.2173913043475], [529.0, 4428.125], [531.0, 4557.393939393939], [533.0, 4706.535714285716], [532.0, 4675.190476190476], [535.0, 4714.428571428572], [534.0, 4710.090909090909], [540.0, 4493.967105263161], [543.0, 4440.6], [542.0, 4495.076923076923], [541.0, 4541.0], [537.0, 4730.416666666666], [568.0, 4517.333333333333], [574.0, 5199.333333333333], [570.0, 4853.8161764705865], [550.0, 3985.861702127661], [549.0, 4363.187499999999], [547.0, 4507.0], [545.0, 4629.5], [544.0, 4594.142857142857], [559.0, 4113.1111111111095], [558.0, 4101.5], [556.0, 4227.999999999999], [555.0, 4259.90625], [554.0, 4147.705882352941], [553.0, 4156.5], [552.0, 4156.0], [560.0, 3842.402985074626], [561.0, 4255.25], [563.0, 4309.727272727273], [562.0, 4324.5], [565.0, 4443.169491525424], [564.0, 4253.666666666667], [567.0, 4537.0], [566.0, 4657.0], [573.0, 5059.0], [572.0, 4941.625], [571.0, 4727.884615384616], [569.0, 4519.111111111111], [583.0, 5188.75], [603.0, 4720.428571428571], [580.0, 4463.100346020762], [590.0, 3979.7631578947367], [589.0, 5407.0], [588.0, 5403.6], [587.0, 5281.0], [586.0, 5329.333333333333], [585.0, 5208.416666666667], [584.0, 5207.349999999999], [591.0, 5354.857142857143], [577.0, 5064.5625], [576.0, 5020.25], [579.0, 5123.8], [578.0, 5161.250000000001], [600.0, 4826.3983739837395], [582.0, 5211.833333333333], [581.0, 5173.333333333333], [607.0, 4505.035714285714], [595.0, 5196.965517241378], [592.0, 5120.0], [597.0, 4882.0], [596.0, 5190.25], [599.0, 5000.555555555556], [598.0, 4974.285714285715], [606.0, 4468.125], [604.0, 4495.705882352941], [602.0, 4756.25], [601.0, 4785.624999999999], [637.0, 5906.909090909091], [610.0, 4848.220588235293], [620.0, 4161.8487394958], [619.0, 4681.6296296296305], [618.0, 4506.6], [617.0, 4646.888888888888], [616.0, 4539.919999999999], [621.0, 5039.0], [623.0, 4974.52380952381], [609.0, 4421.571428571428], [608.0, 4411.666666666667], [622.0, 5060.333333333333], [630.0, 4800.6], [629.0, 5330.652173913043], [628.0, 5247.062500000001], [627.0, 5232.0], [626.0, 5158.0], [625.0, 5106.166666666666], [624.0, 5080.000000000001], [631.0, 5529.909090909091], [639.0, 5815.142857142858], [638.0, 5833.0], [636.0, 5339.125], [635.0, 5560.0], [634.0, 5806.0], [633.0, 5739.425531914893], [632.0, 5341.2], [615.0, 4417.538461538462], [614.0, 4376.25], [611.0, 4397.421052631579], [644.0, 5819.4], [667.0, 4921.6], [640.0, 5521.9885057471265], [641.0, 5985.0], [643.0, 5963.0], [642.0, 5882.699999999999], [646.0, 5655.5], [645.0, 5831.5], [664.0, 4992.291666666666], [647.0, 5799.631578947367], [666.0, 4947.739130434783], [665.0, 5003.166666666666], [650.0, 4821.701030927831], [648.0, 5671.700000000001], [652.0, 5452.875], [651.0, 5570.571428571428], [654.0, 5204.5], [653.0, 5304.58064516129], [655.0, 5273.0], [660.0, 4365.188405797103], [663.0, 5034.5], [662.0, 5054.277777777779], [670.0, 5327.042372881354], [671.0, 4941.466666666666], [657.0, 5105.689655172414], [656.0, 5249.0], [659.0, 5018.384615384614], [658.0, 5097.4], [669.0, 4842.0], [679.0, 5507.0], [700.0, 5510.961697546604], [680.0, 5732.21518987342], [682.0, 5860.6], [681.0, 5864.333333333333], [684.0, 6248.5], [683.0, 5844.307692307694], [686.0, 5671.0], [685.0, 5825.666666666667], [690.0, 4801.6613545816745], [689.0, 5958.0952380952385], [688.0, 5528.578947368421], [691.0, 5898.444444444444], [698.0, 6197.652173913043], [697.0, 6193.493670886074], [696.0, 6117.875], [678.0, 5387.923076923077], [677.0, 5267.200000000001], [676.0, 5279.6], [675.0, 5199.545454545455], [674.0, 5171.5625], [673.0, 4986.130434782609], [672.0, 4891.840000000001], [687.0, 5555.25], [695.0, 6117.0], [694.0, 6088.0], [693.0, 6044.615384615385], [692.0, 5959.416666666666]], "isOverall": false, "label": "move to login page", "isController": false}, {"data": [[531.5470965288736, 4098.943587375728]], "isOverall": false, "label": "move to login page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18294.733333333334, "minX": 1.49607684E12, "maxY": 950845.1166666667, "series": [{"data": [[1.49607702E12, 950845.1166666667], [1.49607684E12, 599264.0833333334], [1.49607732E12, 911015.25], [1.49607714E12, 917295.1666666666], [1.49607696E12, 922779.0666666667], [1.49607744E12, 673215.1], [1.49607726E12, 918690.2333333333], [1.49607708E12, 917592.75], [1.4960769E12, 942795.7833333333], [1.49607738E12, 929936.2166666667], [1.4960772E12, 918315.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.49607702E12, 28406.733333333334], [1.49607684E12, 18294.733333333334], [1.49607732E12, 28595.6], [1.49607714E12, 28606.766666666666], [1.49607696E12, 28587.733333333334], [1.49607744E12, 21081.733333333334], [1.49607726E12, 28521.966666666667], [1.49607708E12, 28643.866666666665], [1.4960769E12, 28379.533333333333], [1.49607738E12, 28893.533333333333], [1.4960772E12, 28621.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.49607744E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 555.5524140930846, "minX": 1.49607684E12, "maxY": 5794.951704545454, "series": [{"data": [[1.49607702E12, 5353.905189910128], [1.49607684E12, 668.6578947368423], [1.49607732E12, 5683.968406205917], [1.49607714E12, 5780.325134294595], [1.49607696E12, 3733.3012765957365], [1.49607744E12, 1284.0091918805053], [1.49607726E12, 5794.951704545454], [1.49607708E12, 5763.011007620671], [1.4960769E12, 2024.7761064506833], [1.49607738E12, 3681.9343986543377], [1.4960772E12, 5778.894290559639]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[1.49607702E12, 5087.242399342654], [1.49607684E12, 555.5524140930846], [1.49607732E12, 5426.849899742188], [1.49607714E12, 5501.180887372004], [1.49607696E12, 3478.5941209723087], [1.49607744E12, 1178.6329457364363], [1.49607726E12, 5525.119534355491], [1.49607708E12, 5486.332669889107], [1.4960769E12, 1953.2147001934215], [1.49607738E12, 3426.8799438990163], [1.4960772E12, 5508.048295454538]], "isOverall": false, "label": "move to login page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.49607744E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 555.5180513266636, "minX": 1.49607684E12, "maxY": 5794.951136363628, "series": [{"data": [[1.49607702E12, 5353.904610031905], [1.49607684E12, 668.6565566458529], [1.49607732E12, 5683.966995768703], [1.49607714E12, 5780.324003392693], [1.49607696E12, 3733.30099290781], [1.49607744E12, 1284.0088088854825], [1.49607726E12, 5794.951136363628], [1.49607708E12, 5763.010443127286], [1.4960769E12, 2024.7755279143785], [1.49607738E12, 3681.933557611441], [1.4960772E12, 5778.893725268527]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[1.49607702E12, 5087.20405368392], [1.49607684E12, 555.5180513266636], [1.49607732E12, 5426.804640504164], [1.49607714E12, 5501.148464163833], [1.49607696E12, 3478.5545505935515], [1.49607744E12, 1178.617441860466], [1.49607726E12, 5525.06189664962], [1.49607708E12, 5486.276087574648], [1.4960769E12, 1953.1953578336545], [1.49607738E12, 3426.8409537166986], [1.4960772E12, 5508.0042613636415]], "isOverall": false, "label": "move to login page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.49607744E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 150.2176628010706, "minX": 1.49607684E12, "maxY": 3997.796359499429, "series": [{"data": [[1.49607702E12, 3626.928964917365], [1.49607684E12, 150.2176628010706], [1.49607732E12, 3893.5472496473967], [1.49607714E12, 3938.929884082556], [1.49607696E12, 2460.8853900709205], [1.49607744E12, 531.6055151283005], [1.49607726E12, 3923.762215909089], [1.49607708E12, 3906.911092294657], [1.4960769E12, 955.0995082441416], [1.49607738E12, 2449.6910569105717], [1.4960772E12, 3928.2190503109027]], "isOverall": false, "label": "login as doctor", "isController": false}, {"data": [[1.49607702E12, 3693.2325390304013], [1.49607684E12, 304.88473249238785], [1.49607732E12, 3938.341735892299], [1.49607714E12, 3997.796359499429], [1.49607696E12, 2530.8408705483243], [1.49607744E12, 761.9806201550396], [1.49607726E12, 3967.6587166382797], [1.49607708E12, 3981.090986636341], [1.4960769E12, 1309.9975131251672], [1.49607738E12, 2450.4619915848484], [1.4960772E12, 3975.9667613636407]], "isOverall": false, "label": "move to login page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.49607744E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.49607684E12, "maxY": 3000.0, "series": [{"data": [[1.49607684E12, 1906.0], [1.49607696E12, 3000.0], [1.49607744E12, 2994.0], [1.4960769E12, 2998.0], [1.49607738E12, 3000.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.49607684E12, 13.0], [1.49607696E12, 1322.0], [1.49607744E12, 13.0], [1.4960769E12, 212.0], [1.49607738E12, 1818.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.49607684E12, 1301.0], [1.49607696E12, 2746.0], [1.49607744E12, 2744.0], [1.4960769E12, 2583.0], [1.49607738E12, 2816.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.49607684E12, 1699.1599999999999], [1.49607696E12, 2973.6399999999994], [1.49607744E12, 2974.5099999999984], [1.4960769E12, 2941.0], [1.49607738E12, 2980.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.49607684E12, 1443.0], [1.49607696E12, 2876.0], [1.49607744E12, 2877.0], [1.4960769E12, 2756.0], [1.49607738E12, 2908.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.49607744E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 520.0, "minX": 75.0, "maxY": 5601.0, "series": [{"data": [[75.0, 520.0], [86.0, 1122.0], [117.0, 2064.5], [118.0, 2608.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[86.0, 3053.0], [117.0, 5601.0], [118.0, 4710.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 118.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 520.0, "minX": 75.0, "maxY": 5601.0, "series": [{"data": [[75.0, 520.0], [86.0, 1122.0], [117.0, 2064.5], [118.0, 2608.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[86.0, 3053.0], [117.0, 5601.0], [118.0, 4710.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 118.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 77.86666666666666, "minX": 1.49607684E12, "maxY": 121.3, "series": [{"data": [[1.49607702E12, 120.5], [1.49607684E12, 77.86666666666666], [1.49607732E12, 115.45], [1.49607714E12, 117.6], [1.49607696E12, 121.3], [1.49607744E12, 82.38333333333334], [1.49607726E12, 117.48333333333333], [1.49607708E12, 117.71666666666667], [1.4960769E12, 121.06666666666666], [1.49607738E12, 113.68333333333334], [1.4960772E12, 117.48333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.49607744E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 37.36666666666667, "minX": 1.49607684E12, "maxY": 60.85, "series": [{"data": [[1.49607702E12, 60.85], [1.49607684E12, 38.31666666666667], [1.49607732E12, 58.18333333333333], [1.49607714E12, 58.6], [1.49607696E12, 58.96666666666667], [1.49607744E12, 43.0], [1.49607726E12, 58.7], [1.49607708E12, 58.61666666666667], [1.4960769E12, 60.31666666666667], [1.49607738E12, 59.416666666666664], [1.4960772E12, 58.666666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.49607702E12, 57.483333333333334], [1.49607684E12, 37.36666666666667], [1.49607732E12, 59.083333333333336], [1.49607714E12, 58.95], [1.49607696E12, 58.75], [1.49607744E12, 43.516666666666666], [1.49607726E12, 58.666666666666664], [1.49607708E12, 59.05], [1.4960769E12, 57.61666666666667], [1.49607738E12, 59.45], [1.4960772E12, 58.96666666666667]], "isOverall": false, "label": "302", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.49607744E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.49607684E12, "maxY": 60.85, "series": [{"data": [[1.49607702E12, 57.483333333333334], [1.49607732E12, 59.083333333333336], [1.49607714E12, 58.95], [1.49607696E12, 50.06666666666667], [1.49607744E12, 0.03333333333333333], [1.49607726E12, 58.666666666666664], [1.49607708E12, 59.05], [1.4960769E12, 8.116666666666667], [1.49607738E12, 43.88333333333333], [1.4960772E12, 58.96666666666667]], "isOverall": false, "label": "login as doctor-failure", "isController": false}, {"data": [[1.49607684E12, 38.31666666666667], [1.49607696E12, 14.883333333333333], [1.49607744E12, 43.0], [1.4960769E12, 56.833333333333336], [1.49607738E12, 21.5]], "isOverall": false, "label": "move to login page-success", "isController": false}, {"data": [[1.49607684E12, 37.36666666666667], [1.49607696E12, 8.683333333333334], [1.49607744E12, 43.483333333333334], [1.4960769E12, 49.5], [1.49607738E12, 15.566666666666666]], "isOverall": false, "label": "login as doctor-success", "isController": false}, {"data": [[1.49607702E12, 60.85], [1.49607732E12, 58.18333333333333], [1.49607714E12, 58.6], [1.49607696E12, 44.083333333333336], [1.49607726E12, 58.7], [1.49607708E12, 58.61666666666667], [1.4960769E12, 3.4833333333333334], [1.49607738E12, 37.916666666666664], [1.4960772E12, 58.666666666666664]], "isOverall": false, "label": "move to login page-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.49607744E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
